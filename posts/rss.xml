<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Mind's Home</title><link>https://peace0phmind.github.io/posts/</link><description>Recent content in Posts on Mind's Home</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 04 Nov 2022 14:24:27 +0800</lastBuildDate><atom:link href="https://peace0phmind.github.io/posts/rss.xml" rel="self" type="application/rss+xml"/><item><title>Mpv快捷键</title><link>https://peace0phmind.github.io/posts/202211/mpv-keyboard/</link><pubDate>Fri, 04 Nov 2022 14:24:27 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202211/mpv-keyboard/</guid><description>Seek backward/forward 5 seconds LEFT and RIGHT Seek backward/forward 5 seconds. Shift+arrow does a 1 second exact seek (see --hr-seek). Seek forward/backward 1 minute UP and DOWN Seek forward/backward 1 minute. Shift+arrow does a 5 second exact seek (see --hr-seek). Seek to the previous/next subtitle Ctrl+LEFT and Ctrl+RIGHT Seek to the previous/next subtitle. Subject to some restrictions and might not always work; see sub-seek command. Adjust subtitle delay Ctrl+Shift+Left and</description></item><item><title>Docker Command</title><link>https://peace0phmind.github.io/posts/202107/docker-command/</link><pubDate>Tue, 06 Jul 2021 16:34:11 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202107/docker-command/</guid><description>run v2ray under docker docker run &amp;ndash;restart=always &amp;ndash;network host -d &amp;ndash;name v2ray -v ~/etc/v2ray:/etc/v2ray v2fly/v2fly-core v2ray &amp;ndash;config=/etc/v2ray/config.json</description></item><item><title>初始化pi4环境</title><link>https://peace0phmind.github.io/posts/202107/init-pi4-env/</link><pubDate>Tue, 06 Jul 2021 15:43:27 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202107/init-pi4-env/</guid><description>更新环境 sudo apt update sudo apt upgrade 安装docker Add Docker’s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg set up the stable repository echo &amp;#34;deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null Install Docker Engine sudo apt-get update sudo apt-get install docker-ce docker-ce-cli</description></item><item><title>分析Ubuntu Arm64 Docker Build</title><link>https://peace0phmind.github.io/posts/202011/how-to-build-ubuntu-arm64-docker/</link><pubDate>Sat, 21 Nov 2020 17:25:57 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/how-to-build-ubuntu-arm64-docker/</guid><description>Ubuntu的Arm64 Docker Image项目在： docker-brew-ubuntu-core 该项目需要配合 Jenkins pipe line 文件执行。 文件首先删除 docker-brew-ubuntu-core 工程的对应arm64分支dist-amd64，并重</description></item><item><title>在Pi4上编译ffmpeg支持硬件编解码以及测试和使用方法</title><link>https://peace0phmind.github.io/posts/202011/build-ffmpeg-under-pi4/</link><pubDate>Thu, 19 Nov 2020 15:27:31 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/build-ffmpeg-under-pi4/</guid><description>由于某些原因，需要在raspberry pi 4上编译最新版本ffmpeg，下面是方法以及测试方案。 编译准备 sudo apt update sudo apt upgrade 安装必要的工具和库 sudo apt install build-essential</description></item><item><title>Raspberry PI4环境初始化</title><link>https://peace0phmind.github.io/posts/202011/init-pi4/</link><pubDate>Wed, 18 Nov 2020 18:45:20 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/init-pi4/</guid><description>pi 4准备 安装最新的pi镜像: 2020-08-20-raspios-buster-armhf 配置apt代理 sudo nano /etc/apt/apt.conf 添加下面语句到文件中：其中如果代理不需要登陆。username:password@可省略；</description></item><item><title>列举pip可安装组件的版本信息</title><link>https://peace0phmind.github.io/posts/202011/pip-list-all-versions-of-package/</link><pubDate>Fri, 13 Nov 2020 15:13:02 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/pip-list-all-versions-of-package/</guid><description>方法1 在需要安装组件名称后添加==符号，pip会自动列举可安装版本信息。 输入： pip3 install pyqt5== 得到： Could not find a version that satisfies the requirement pyqt5== (from versions: 5.14.0, 5.14.1, 5.14.2, 5.15.0, 5.15.1) 其他方法参考 Python and</description></item><item><title>使用CrowdHuman训练Yolov4</title><link>https://peace0phmind.github.io/posts/202011/use-crowd-human-trainning-yolov4/</link><pubDate>Fri, 13 Nov 2020 12:22:37 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/use-crowd-human-trainning-yolov4/</guid><description>本文介绍在agx上使用旷视CrowdHuman库训练yoloV4模型。 数据准备 git clone https://github.com/jkjung-avt/yolov4_crowdhuman cd yolov4_crowdhuman/data ./prepare_data.sh 960x960 在agx上训练 git clone https://github.com/AlexeyAB/darknet.git</description></item><item><title>AI库</title><link>https://peace0phmind.github.io/posts/202011/ai-datasets/</link><pubDate>Fri, 13 Nov 2020 12:16:01 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/ai-datasets/</guid><description>旷视人脸，人头,人脸，身体库 CrowdHuman is a benchmark dataset to better evaluate detectors in crowd scenarios. The CrowdHuman dataset is large, rich-annotated and contains high diversity. CrowdHuman contains 15000, 4370 and 5000 images for training, validation, and testing, respectively. There are a total of 470K human instances from train and validation subsets and 23 persons per image, with various kinds</description></item><item><title>人体姿势识别</title><link>https://peace0phmind.github.io/posts/202011/pose-of-person/</link><pubDate>Fri, 06 Nov 2020 18:51:12 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/pose-of-person/</guid><description>本文尝试运行trt_pose项目。 安装依赖 安装PyTorch和Torchvision, 参见 安装Pytorch和Torchvision 安装 torch2trt git</description></item><item><title>Hello Jetson Inference</title><link>https://peace0phmind.github.io/posts/202011/hello-jetson-inference/</link><pubDate>Thu, 05 Nov 2020 13:11:47 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/hello-jetson-inference/</guid><description>本文尝试运行Hello AI World,Hello AI World 主要包括：图像分类、物体识别、图像分割。 Jetson nano安装JetPack 略，参见 Jetson Nano环境初始化 编译项目 更新系</description></item><item><title>安装Pytorch和Torchvision</title><link>https://peace0phmind.github.io/posts/202011/install-pytorch-torchvision/</link><pubDate>Wed, 04 Nov 2020 18:07:26 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/install-pytorch-torchvision/</guid><description>本文简单描述在jetson nano上安装最新的pytorch 1.7.0和torchvision 0.8.1的步骤。 安装 安装前准备 sudo apt update sudo apt upgrade 安</description></item><item><title>编译最新opencv 4.4.0 with cuda</title><link>https://peace0phmind.github.io/posts/202011/build-opencv-with-cuda/</link><pubDate>Tue, 03 Nov 2020 15:23:50 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/build-opencv-with-cuda/</guid><description>本文介绍如何在nano/agx上编译opencv 4.4.0 with cuda. 步骤 该库在原有库基础上做了一些调整，原有库在nano上只能单线程运行。需要原有库的同学</description></item><item><title>Ubuntu使用Mac键盘</title><link>https://peace0phmind.github.io/posts/202011/ubuntu-use-mac-keyboard/</link><pubDate>Mon, 02 Nov 2020 16:07:57 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/ubuntu-use-mac-keyboard/</guid><description>介绍如何在ubuntu下使用mac键盘。 由于长期使用mac的缘故，对command按键的使用非常顺手，又由于需要使用blender软件，所以</description></item><item><title>Blender 2.8x快捷键</title><link>https://peace0phmind.github.io/posts/202011/blender-2.8x-shortcuts/</link><pubDate>Mon, 02 Nov 2020 12:08:35 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202011/blender-2.8x-shortcuts/</guid><description>本文主要记录 Blender 2.8x的快捷方式。 注：num_做前缀的按钮表示数字键盘区的按键，num_7表示的是数字小键盘7，其他对照类比。普通的按键7会</description></item><item><title>常用命令与工具</title><link>https://peace0phmind.github.io/posts/202010/usage-commands/</link><pubDate>Fri, 30 Oct 2020 17:23:54 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202010/usage-commands/</guid><description>类似mac airdrop的工具 这里强烈推荐一个类似mac下airdrop的网站, https://snapdrop.net 这个网站可以让使用同一局域网的所有设备（jetson agx/nano, raspberry pi,</description></item><item><title>调整内存使用</title><link>https://peace0phmind.github.io/posts/202010/tuning-memory-usage/</link><pubDate>Thu, 29 Oct 2020 11:00:47 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202010/tuning-memory-usage/</guid><description>nano分4G版和2G版。其SD镜像分别为： 4G版 ， 2G版 。 4G和2G内存版本的主要区别在于启动后的桌面，2G内存版考虑到内存少的情况，启用</description></item><item><title>Jetson Nano环境初始化</title><link>https://peace0phmind.github.io/posts/202010/nano-env-init/</link><pubDate>Wed, 28 Oct 2020 15:31:36 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202010/nano-env-init/</guid><description>本文主要介绍Jetson Nano启动后环境的准备工作. TF卡flush以及系统启动初始化 下载并烧录最新的TF卡镜像 4G内存版 ; 2G内存版 。完</description></item><item><title>AGX添加nvme ssd并设置从ssd启动</title><link>https://peace0phmind.github.io/posts/202010/add-nvme-ssd/</link><pubDate>Thu, 22 Oct 2020 16:51:33 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202010/add-nvme-ssd/</guid><description>AGX出厂自带32G EMMC，并自带Ubuntu 18.04 + JetPack 4.4。本文对EMMC进行了磁盘读写的测试，并且对AGX进行改装，分别测试加装了海康的</description></item><item><title>Agx开箱</title><link>https://peace0phmind.github.io/posts/202010/get-and-assemble-agx/</link><pubDate>Wed, 21 Oct 2020 14:11:30 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202010/get-and-assemble-agx/</guid><description>经过20天漫长的等待，终于在某个星期日收到了包裹。 包裹看上去挺大的。 拆开后AGX的盒子大概这么大，图的上方是我的Mac book pro,可以对比参考</description></item><item><title>开篇</title><link>https://peace0phmind.github.io/posts/202010/my-first-post/</link><pubDate>Tue, 20 Oct 2020 19:37:14 +0800</pubDate><guid>https://peace0phmind.github.io/posts/202010/my-first-post/</guid><description>9月份某个星期六，加班到恨晚考虑到第二天还要到公司，于是将电脑放在了窗边的工位上。第二天一场大雨把我2013年下半年购买的顶配（习惯购买默认</description></item></channel></rss>