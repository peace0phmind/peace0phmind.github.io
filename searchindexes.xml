<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Machine Learning</title><url>/posts/202211/01-machine-learning/</url><categories><category>machine-learning</category></categories><tags><tag/></tags><content type="html"> # ML ## Suppervised Learning - [Regression](/posts/202211/02-regression) - [Backpropagation](/posts/202211/02-regression#backpropagation) - [Regularization](/posts/202211/02-regression#regularization) - [Classification](/posts/202211/03-classification) - Structured Learning - Create something with structure (image, document) ## Self-Supervised Learning - Pre-Trained Model(Foundation Model) - unlabeled Data - Downstream Tasks - Models - BERT - ELMo - GPT-2 - GPT-3 - T5 ## Generative Adversarial Network - 收集大量x和y - x和y是unpaired - 研究成果 - [Unsupervised Abstractive Summarization](https://arxiv.org/abs/1810.02851) - [Unsupervised Translation](https://arxiv.org/abs/1710.11041) - [04087](https://arxiv.org/abs/1710.04087) - [Unsupervised ASR](https://arxiv.org/abs/2105.11084) - [1804.00316](https://arxiv.org/abs/1804.00316) - [1812.09323](https://arxiv.org/abs/1812.09323) - [1904.04100](https://arxiv.org/abs/1904.04100) ## Reinforcement Learning (RL) ## Anomaly Detaction(异常检测, 让机器知道它不知道) ## Explainable AI ## Model Attack (模型攻击) ## Domain Adaptation ## Network Compression ## Life-Long Learning ## Meta Learning = Learn to Learn - Few-shot Learning Machine Learning是什么 简单的理解就是在输入和输出中找一个函数
Different types of Functions Deep Learning Introduce history (Ups and downs of Deep Learning) 1958: Perceptron (linear model) 1969: Perceptron has limitation 1980: Multi-layer perceptron Do not have significant difference from DNN today 1986: Backpropagation Usually more than 3 hidden layers is not helpful 1989: 1 hidden layer is &amp;ldquo;good enough&amp;rdquo;, why deep? 2006: RBM initialization (breakthrough) 2009: GPU 2011: Start to be popular in speech recognition 2012: win ILSVRC image competition Fully Connect Feedforward Network 输入叫Input Layer 输出叫Output Layer 中间层叫hidden Layers Fully Connect Feedforward Network Deep = Many hidden layers AlexNet(2012), 8 layers, error rate: 16.4% VGG(2014), 19 layers, error rate: 7.3% GoogleNet(2014), 22 layers, error rate: 6.7% Residual Net(2015), 152 layers, error rate: 3.57% FAQ Q: How many layers? How many neurons for each layer? Trial and Error + Intuition Q: Can the structure be automatically determined? Evolutionary Artificial Neural Networks Q: Can we design the network structure? Convolutional Neural Network (CNN) Q: Deeper is Better? Universality Theorem Any continuous function f $ f : R^N \rightarrow R^M $ Can be realized by a network with one hidden layer (given enough hidden neurons) Why Deep neural network not Fat neural network? Reference 系列文档是国立台湾大学 李宏毅 老师Machine Learning系列教材的学习整理。
Machine Learning 2022 Machine Learning 2021 Machine Learning 2020 Machine Learning 2019 Machine Learning 2016 FALL MLDS 2015 FALL Nvidia Resources nvidia training resource Reference Book Neural Networks and Deep Learning written by Michael Nielsen Deep Learning written by Yoshua Bengio, Ian J. Goodfellow and Aaron Courville</content></entry><entry><title>latex公式</title><url>/posts/202211/latex-formula/</url><categories><category>blog</category></categories><tags><tag>latex</tag><tag>formula</tag></tags><content type="html"><![CDATA[Use $\Sigma$ in different mode sum mode making-the-subscript-under-the-summation use color Using_colours_in_LaTeX inline math $\sum_{i=1}^{\infty}|x_i-y_i|$ $\sum_{i=1}^{\infty}|x_i-y_i|$
display math $$ \sum_{i=1}^{\infty}|x_i-y_i| $$ $$ \sum_{i=1}^{\infty}|x_i-y_i| $$
use \limits $\sum\limits_{i=1}^{\infty}|x_i-y_i|$ $\sum\limits_{i=1}^{\infty}|x_i-y_i|$
use color ${\color{red}\eta}\frac{{\delta}L}{{\delta}W}|_{w=w^0}$ ${\color{red}\eta}\frac{{\delta}L}{{\delta}W}|_{w=w^0}$
frac and sfrac $ \frac{1}{2} = \sfrac{1}{2} $ $ \frac{1}{2} = \sfrac{1}{2} $
text and textcolor $\textcolor{red}{\text{red curve}}\text{ will be}$ $\textcolor{red}{\text{red curve}}\text{ will be}$
cases $$ \delta(x) = \begin{cases} g(x) &gt; 0 &amp; \text{Output = class 1} \cr else &amp; \text{Output = class 2} \end{cases} $$ $$ \delta(x) = \begin{cases}
g(x) &gt; 0 &amp; \text{Output = class 1} \cr else &amp; \text{Output = class 2} \end{cases} $$
newline, space, align and tag new line use \cr or \\\\ space use \\,, \quad align use \begin{align}, \end{align} and &amp; tag use \tag{1}, or use ams automatic , equation-numbers tag with ams automatic, will omit by \notag or block symbol end with *, for example: \begin{align*}, \end{align*} use \begin{align} and \end{align} instead of $$ or $ \begin{align} x&amp;=y &amp; w &amp;=z &amp; a&amp;=b+c \\\\ 2x&amp;=-y &amp; 3w&amp;=\frac{1}{2}z &amp; a&amp;=b \notag \cr -4 + 5x&amp;=2+y &amp; w+2&amp;=-1+w &amp; a \quad b&amp;=c\\,b\tag{xyz} \end{align} \begin{align} x&amp;=y &amp; w &amp;=z &amp; a&amp;=b+c \\ 2x&amp;=-y &amp; 3w&amp;=\frac{1}{2}z &amp; a&amp;=b \notag \cr -4 + 5x&amp;=2+y &amp; w+2&amp;=-1+w &amp; a \quad b&amp;=c\,b\tag{xyz} \end{align}
\begin{align*} x&amp;=y &amp; w &amp;=z &amp; a&amp;=b+c \\\\ 2x&amp;=-y &amp; 3w&amp;=\frac{1}{2}z &amp; a&amp;=b \notag \cr -4 + 5x&amp;=2+y &amp; w+2&amp;=-1+w &amp; a \quad b&amp;=c\\,b\tag{xyz} \end{align*} \begin{align*} x&amp;=y &amp; w &amp;=z &amp; a&amp;=b+c \\ 2x&amp;=-y &amp; 3w&amp;=\frac{1}{2}z &amp; a&amp;=b \notag \cr -4 + 5x&amp;=2+y &amp; w+2&amp;=-1+w &amp; a \quad b&amp;=c\,b\tag{xyz} \end{align*}
matrices Matrices Type Latex markup Render as Plain \begin{matrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{matrix} \begin{matrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{matrix} Parentheses; round brackets \begin{pmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{pmatrix} \begin{pmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{pmatrix} Brackets; square brackets \begin{bmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{bmatrix} \begin{bmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{bmatrix} Braces; curly brackets \begin{Bmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{Bmatrix} \begin{Bmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{Bmatrix} Pipes \begin{vmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{vmatrix} \begin{vmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{vmatrix} Double pipes \begin{Vmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{Vmatrix} \begin{Vmatrix} 1 &amp; 2 &amp; 3\cr a &amp; b &amp; c \end{Vmatrix} block symbol: equation, split, multline, gather, align equation equation can only include one equation or it will not render \begin{equation} x=y \end{equation} \begin{equation} x=y \end{equation}
\begin{equation} x=y \cr y=b \end{equation} \begin{equation} x=y \cr y=b \end{equation}
split split can use with equation but the tag was only one \begin{equation} \begin{split} x=y \cr y=b \end{split} \end{equation} \begin{equation} \begin{split} x=y \cr y=b \end{split} \end{equation}
multline multline same as equation with split but with different align \begin{multline} x=y \cr y=b \end{multline} \begin{multline} x=y \cr y=b \end{multline}
gather \begin{gather} x=y \cr y=b \end{gather} \begin{gather} x=y \cr y=b \end{gather}
align \begin{align} x=y \cr y=b \end{align} \begin{align} x=y \cr y=b \end{align}
参考 Classical ML Equations in LaTeX ]]></content></entry><entry><title>latex符号</title><url>/posts/202211/latex-symbols.html</url><categories><category>blog</category></categories><tags><tag>latex</tag><tag>symbol</tag></tags><content type="html"><![CDATA[reference MathJax LaTex Ref LaTex Math Symbols or LaTex Math Symbols LaTeX_mathematical_symbols short-math-guide or short-math-guide spaces in markdown Regular space : There&#39;s a regular&amp;nbsp;space. Two spaces gap : There&#39;s a regular&amp;ensp;space. Four spaces gap: There&#39;s a regular&amp;emsp;space. There&rsquo;s a regular space. There&rsquo;s a regular space. There&rsquo;s a regular space. Math Mode Accents $\hat{a}$ \hat{a} $\check{a}$ \check{a} $\tilde{a}$ \tilde{a} $\acute{a}$ \acute{a} $\grave{a}$ \grave{a} $\dot{a}$ \dot{a} $\ddot{a}$ \ddot{a} $\breve{a}$ \breve{a} $\bar{a}$ \bar{a} $\vec{a}$ \vec{a} $\widehat{A}$ \widehat{A} $\widetilde{A}$ \widetilde{A} Greek Letters alpha, beta, gamma, delta, epsilon, zeta, eta, theta, iota, kappa, lambda, mu, nu, xi, omicron, pi, rho, sigma, tau, upsilon, phi, chi, psi, omega.
$\alpha$ \alpha $\beta$ \beta $\Gamma$ $\gamma$ \Gamma \gamma $\Delta$ $\delta$ \Delta \delta $\epsilon$ $\varepsilon$ \epsilon \varepsilon $\zeta$ \zeta $\eta$ \eta $\Theta$ $\theta$ $\vartheta$ \Theta \theta \vartheta $\iota$ \iota $\kappa$ \kappa $\Lambda$ $\lambda$ \Lambda \lambda $\mu$ \mu $\nu$ \nu $\Xi$ $\xi$ \Xi \xi $o$ o (omicron) $\Pi$ $\pi$ $\varpi$ \Pi \pi \varpi $\rho$ $\varrho$ \rho \varrho $\Sigma$ $\sigma$ $\varsigma$ \Sigma \sigma \varsigma $\tau$ \tau $\Upsilon$ $\upsilon$ \Upsilon \upsilon $\Phi$ $\phi$ $\varphi$ \Phi \phi \varphi $\chi$ \chi $\Psi$ $\psi$ \Psi \psi $\Omega$ $\omega$ \Omega \omega Arrows $\leftarrow$ \leftarrow or \gets $\rightarrow$ \rightarrow or \to $\leftrightarrow$ \leftrightarrow $\Leftarrow$ \Leftarrow $\Rightarrow$ \Rightarrow $\Leftrightarrow$ \Leftrightarrow $\longleftarrow$ \longleftarrow $\longrightarrow$ \longrightarrow $\longleftrightarrow$ \longleftrightarrow $\Longleftarrow$ \Longleftarrow $\Longrightarrow$ \Longrightarrow $\Longleftrightarrow$ \Longleftrightarrow or \iff $\uparrow$ \uparrow $\downarrow$ \downarrow $\updownarrow$ \updownarrow $\Uparrow$ \Uparrow $\Downarrow$ \Downarrow $\Updownarrow$ \Updownarrow $\mapsto$ \mapsto $\longmapsto$ \longmapsto $\multimap$ \multimap $\hookleftarrow$ \hookleftarrow $\hookrightarrow$ \hookrightarrow $\upharpoonleft$ \upharpoonleft $\leftharpoonup$ \leftharpoonup $\rightharpoonup$ \rightharpoonup $\upharpoonright$ \upharpoonright $\leftharpoondown$ \leftharpoondown $\rightharpoondown$ \rightharpoondown $\downharpoonleft$ \downharpoonleft $\leftrightharpoons$ \leftrightharpoons $\rightleftharpoons$ \rightleftharpoons $\downharpoonright$ \downharpoonright $\leftleftarrows$ \leftleftarrows $\rightrightarrows$ \rightrightarrows $\upuparrows$ \upuparrows $\leftrightarrows$ \leftrightarrows $\rightleftarrows$ \rightleftarrows $\downdownarrows$ \downdownarrows $\dashleftarrow$ \dashleftarrow $\dashrightarrow$ \dashrightarrow $\nearrow$ \nearrow $\twoheadleftarrow$ \twoheadleftarrow $\twoheadrightarrow$ \twoheadrightarrow $\searrow$ \searrow $\leftarrowtail$ \leftarrowtail $\rightarrowtail$ \rightarrowtail $\swarrow$ \swarrow $\Lsh$ \Lsh $\Rsh$ \Rsh $\nwarrow$ \nwarrow $\Lleftarrow$ \Lleftarrow $\Rrightarrow$ \Rrightarrow $\rightsquigarrow$ \rightsquigarrow or \leadsto $\looparrowleft$ \looparrowleft $\looparrowright$ \looparrowright $\leftrightsquigarrow$ \leftrightsquigarrow $\curvearrowleft$ \curvearrowleft $\curvearrowright$ \curvearrowright $\circlearrowleft$ \circlearrowleft $\circlearrowright$ \circlearrowright Miscellaneous Symbols $\dots$ \dots $\cdots$ \cdots $\vdots$ \vdots $\ddots$ \ddots $\hbar$ \hbar $\imath$ \imath $\jmath$ \jmath $\ell$ \ell $\Re$ \Re $\Im$ \Im $\aleph$ \aleph $\wp$ \wp $\forall$ \forall $\exists$ \exists $\mho$ \mho $\partial$ \partial $&rsquo;$ ' $\prime$ \prime $\emptyset$ \emptyset $\infty$ \infty $\nabla$ \nabla $\triangle$ \triangle $\Box$ \Box $\Diamond$ \Diamond $\bot$ \bot $\top$ \top $\angle$ \angle $\surd$ \surd $\diamondsuit$ \diamondsuit $\heartsuit$ \heartsuit $\clubsuit$ \clubsuit $\spadesuit$ \spadesuit $\neg$ \neg or \lnot $\flat$ \flat $\natural$ \natural $\sharp$ \sharp delimiters $($ ( $)$ ) $\lbrack$ [ or \lbrack $\rbrack$ ] or \rbrack $\lbrace$ \\{ or \lbrace $\rbrace$ \\} or \rbrace $\langle$ \langle $\rangle$ \rangle $/$ / $\backslash$ \backslash $\vert$ \vert or | $\Vert$ \Vert or \\| $\lfloor$ \lfloor $\rfloor$ \rfloor $\lceil$ \lceil $\rceil$ \rceil Binary Relations $&lt;$ &lt; $&gt;$ &gt; $=$ = $\leq$ \leq or \le $\geq$ \geq or \ge $\equiv$ \equiv $\ll$ \ll $\gg$ \gg $\doteq$ \doteq $\prec$ \prec $\succ$ \succ $\sim$ \sim $\preceq$ \preceq $\succeq$ \succeq $\simeq$ \simeq $\subset$ \subset $\supset$ \supset $\approx$ \approx $\subseteq$ \subseteq $\supseteq$ \supseteq $\cong$ \cong $\sqsubset$ \sqsubset $\sqsupset$ \sqsupset $\Join$ \Join $\sqsubseteq$ \sqsubseteq $\sqsupseteq$ \sqsupseteq $\bowtie$ \bowtie $\in$ \in $\ni$ \ni or \owns $\propto$ \propto $\vdash$ \vdash $\dashv$ \dashv $\models$ \models $\mid$ \mid $\parallel$ \parallel $\perp$ \perp $\smile$ \smile $\frown$ \frown $\asymp$ \asymp $:$ : $\notin$ \notin $\ne$ \neq or \ne Binary Operators $\pm$ \pm $\mp$ \mp $\triangleleft$ \triangleleft $\cdot$ \cdot $\div$ \div $\triangleright$ \triangleright $\times$ \times $\setminus$ \setminus $\star$ \star $\cup$ \cup $\cap$ \cap $\ast$ \ast $\sqcup$ \sqcup $\sqcap$ \sqcap $\circ$ \circ $\vee$ \vee, \lor $\land$ \wedge, \land $\bullet$ \bullet $\oplus$ \oplus $\ominus$ \ominus $\diamond$ \diamond $\odot$ \odot $\oslash$ \oslash $\uplus$ \uplus $\otimes$ \otimes $\bigcirc$ \bigcirc $\amalg$ \amalg $\bigtriangleup$ \bigtriangleup $\bigtriangledown$ \bigtriangledown $\dagger$ \dagger $\lhd$ \lhd $\rhd$ \rhd $\ddagger$ \ddagger $\unlhd$ \unlhd $\unrhd$ \unrhd $\wr$ \wr AMS Miscellaneous $\hbar$ \hbar $\hslash$ \hslash $\Bbbk$ \Bbbk $\square$ \square $\blacksquare$ \blacksquare $\circledS$ \circledS $\vartriangle$ \vartriangle $\blacktriangle$ \blacktriangle $\complement$ \complement $\triangledown$ \triangledown $\blacktriangledown$ \blacktriangledown $\Game$ \Game $\lozenge$ \lozenge $\blacklozenge$ \blacklozenge $\bigstar$ \bigstar $\angle$ \angle $\measuredangle$ \measuredangle $\sphericalangle$ \sphericalangle $\diagup$ \diagup $\diagdown$ \diagdown $\backprime$ \backprime $\nexists$ \nexists $\Finv$ \Finv $\varnothing$ \varnothing $\eth$ \eth $\mho$ \mho bold fonts For those symbols where \mathbf is not applicable, the \boldsymbol or \pmb commands can be used.
A_\infty + \pi A_0 \sim \mathbf{A}_{\boldsymbol{\infty}} \boldsymbol{+} \boldsymbol{\pi} \mathbf{A}_{\boldsymbol{0}} \sim\pmb{A}_{\pmb{\infty}} \pmb{+}\pmb{\pi} \pmb{A}_{\pmb{0}} $$ A_\infty &#43; \pi A_0 \sim \mathbf{A}_{\boldsymbol{\infty}} \boldsymbol{&#43;} \boldsymbol{\pi} \mathbf{A}_{\boldsymbol{0}} \sim\pmb{A}_{\pmb{\infty}} \pmb{&#43;}\pmb{\pi} \pmb{A}_{\pmb{0}} $$]]></content></entry><entry><title>Latex Colors</title><url>/posts/202211/latex-colors/</url><categories><category>blog</category></categories><tags><tag>latex</tag><tag>colors</tag></tags><content type="html">常用颜色 $\color{Red}\blacksquare$ Red $\color{Green}\blacksquare$ Green $\color{Blue}\blacksquare$ Blue $\color{Cyan}\blacksquare$ Cyan $\color{Magenta}\blacksquare$ Magenta $\color{Yellow}\blacksquare$ Yellow $\color{Black}\blacksquare$ Black $\color{Gray}\blacksquare$ Gray $\color{White}\blacksquare$ White $\color{DarkGray}\blacksquare$ DarkGray $\color{LightGray}\blacksquare$ LightGray $\color{Brown}\blacksquare$ Brown $\color{Lime}\blacksquare$ Lime $\color{Olive}\blacksquare$ Olive $\color{Orange}\blacksquare$ Orange $\color{Pink}\blacksquare$ Pink $\color{Purple}\blacksquare$ Purple $\color{Teal}\blacksquare$ Teal $\color{Violet}\blacksquare$ Violet 扩展颜色(68种) $\color{Apricot}\blacksquare$ Apricot $\color{Aquamarine}\blacksquare$ Aquamarine $\color{Bittersweet}\blacksquare$ Bittersweet $\color{Black}\blacksquare$ Black $\color{Blue}\blacksquare$ Blue $\color{BlueGreen}\blacksquare$ BlueGreen $\color{BlueViolet}\blacksquare$ BlueViolet $\color{BrickRed}\blacksquare$ BrickRed $\color{Brown}\blacksquare$ Brown $\color{BurntOrange}\blacksquare$ BurntOrange $\color{CadetBlue}\blacksquare$ CadetBlue $\color{CarnationPink}\blacksquare$ CarnationPink $\color{Cerulean}\blacksquare$ Cerulean $\color{CornflowerBlue}\blacksquare$ CornflowerBlue $\color{Cyan}\blacksquare$ Cyan $\color{Dandelion}\blacksquare$ Dandelion $\color{DarkOrchid}\blacksquare$ DarkOrchid $\color{Emerald}\blacksquare$ Emerald $\color{ForestGreen}\blacksquare$ ForestGreen $\color{Fuchsia}\blacksquare$ Fuchsia $\color{Goldenrod}\blacksquare$ Goldenrod $\color{Gray}\blacksquare$ Gray $\color{Green}\blacksquare$ Green $\color{GreenYellow}\blacksquare$ GreenYellow $\color{JungleGreen}\blacksquare$ JungleGreen $\color{Lavender}\blacksquare$ Lavender $\color{LimeGreen}\blacksquare$ LimeGreen $\color{Magenta}\blacksquare$ Magenta $\color{Mahogany}\blacksquare$ Mahogany $\color{Maroon}\blacksquare$ Maroon $\color{Melon}\blacksquare$ Melon $\color{MidnightBlue}\blacksquare$ MidnightBlue $\color{Mulberry}\blacksquare$ Mulberry $\color{NavyBlue}\blacksquare$ NavyBlue $\color{OliveGreen}\blacksquare$ OliveGreen $\color{Orange}\blacksquare$ Orange $\color{OrangeRed}\blacksquare$ OrangeRed $\color{Orchid}\blacksquare$ Orchid $\color{Peach}\blacksquare$ Peach $\color{Periwinkle}\blacksquare$ Periwinkle $\color{PineGreen}\blacksquare$ PineGreen $\color{Plum}\blacksquare$ Plum $\color{ProcessBlue}\blacksquare$ ProcessBlue $\color{Purple}\blacksquare$ Purple $\color{RawSienna}\blacksquare$ RawSienna $\color{Red}\blacksquare$ Red $\color{RedOrange}\blacksquare$ RedOrange $\color{RedViolet}\blacksquare$ RedViolet $\color{Rhodamine}\blacksquare$ Rhodamine $\color{RoyalBlue}\blacksquare$ RoyalBlue $\color{RoyalPurple}\blacksquare$ RoyalPurple $\color{RubineRed}\blacksquare$ RubineRed $\color{Salmon}\blacksquare$ Salmon $\color{SeaGreen}\blacksquare$ SeaGreen $\color{Sepia}\blacksquare$ Sepia $\color{SkyBlue}\blacksquare$ SkyBlue $\color{SpringGreen}\blacksquare$ SpringGreen $\color{Tan}\blacksquare$ Tan $\color{TealBlue}\blacksquare$ TealBlue $\color{Thistle}\blacksquare$ Thistle $\color{Turquoise}\blacksquare$ Turquoise $\color{Violet}\blacksquare$ Violet $\color{VioletRed}\blacksquare$ VioletRed $\color{White}\blacksquare$ White $\color{WildStrawberry}\blacksquare$ WildStrawberry $\color{Yellow}\blacksquare$ Yellow $\color{YellowGreen}\blacksquare$ YellowGreen $\color{YellowOrange}\blacksquare$ YellowOrange Reference Using_colours_in_LaTeX</content></entry><entry><title>数据采集套件组装</title><url>/posts/202211/data-acquisition-kit-assembly/</url><categories><category/></categories><tags><tag/></tags><content type="html"><![CDATA[本文主要说明1个Dim槽满配30路电流传感器的材料准备、零部件检查与调整、零部件组装、部件之间的装配到最后验收测试的整个过程。最后顺带介绍下辅助工具。
名词解释 材料: 材料为直接从供应商处采购，无法直接用于装配，需要二次加工的原材料。材料编号统一大写C加下标数字编号$Cn$。 配件: 配件为从供应商处采购，通过简单的安装(或组装)即可正常使用的部件。配件编号统一大写P加下标数字编号$Pn$。 零件: 从材料通过加工得到的部件，零件有其自己独立的编号体系。 材料和配件清单 图片 材料名称 编号 数量 用途 红色电线 $C_1$ 200cm 用于变送器和采集器的电源 黑色电线 $C_2$ 200cm 用于变送器和采集器的电源 4色信号线缆 $C_3$ 540cm 用于变送器信号线 3色电源线缆 $C_4$ 2m 用于电源线 红色接线端子E0306 $C_{11}$ 40个 用于变送器信号线 黄色接线端子E0306 $C_{12}$ 40个 用于变送器信号线 绿色接线端子E0306 $C_{13}$ 40个 用于变送器信号线 黑色接线端子E0306 $C_{14}$ 40个 用于变送器信号线 红色接线端子TE0508 $C_{15}$ 1个 用于电源线 黑色接线端子TE0508 $C_{16}$ 1个 用于电源线 红色接线端子E0508 $C_{17}$ 1个 用于电源线 黑色接线端子E0508 $C_{18}$ 1个 用于电源线 220V转24VDC电源 $P_{1}$ 1个 电源 数字采集器端子台 $P_{2}$ 1个 端子台 RJ45双端子台 $P_{3}$ 2个 RJ45双端子台 RJ45单端子台 $P_{4}$ 1个 RJ45单端子台 3路变送器 $P_{5}$ 10个 3路变送器 机柜用Dim槽 $P_{6}$ 1个 机柜用Dim槽 Dim槽 $P_{7}$ 1根 Dim槽 Dim槽端子 $P_{8}$ 1根 Dim槽端子 三项交流电流传感器 $P_{9}$ 10组 1组3个，分别是红、黄、绿线 RJ45端子 $P_{10}$ 5个 1组3个，分别是红、黄、绿线 端子台线缆 $P_{11}$ 1根 用于电源线 配件确认 数字采集器端子台($P_2$)配件确认与调整 如图示方向为端子台正确安装方向 4排编号如下表格所示 请确保贴纸与PCB板上丝印与表格顺序一致 如发现丝印错误请联系厂商，如发现贴纸顺序错误则可以将贴纸撕下再按正确顺序粘帖 $P_2$正面与侧面图 俯视图 1 黄色标签 2 $P_2$丝印编号表 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 RJ45端子台$P_3(或P_4)$配件确认与调整 $P_3(或P_4)$错误与正确方向图，以及调整方式 将$P_3(或P_4)$侧面放置，螺丝左侧有凹槽的为上端(如图1或3左上)，螺丝左侧有突起的为下端(如图1或3左下) 将端子台按正确方向放置并检查，RJ45口在上端的为错误，RJ45口在下端的为正确 调整方式见图2,将一侧螺丝卸下，将pcb板调整方向，最后将螺丝和边盖重新装配上 $P_4$的侧面图与$P_3$类似，调整方式一致 错误的侧面 1 调整方式 2 正确的侧面 3 $P_3(或P_4)$正确线序 按图1所示方向放置$P_3(或P_4)$ 如图2,端子顺序按从上层到下层，从左侧向右侧数分别为：8,7,6,5; 4,3,2,1 RJ45口从左侧向右侧数顺序为：8,7,6,5,4,3,2,1 请用万用表检测最左上的接线端子与RJ45最左侧的线是否联通来检测顺序是否正确 正面图 1 接线顺序图 2 RJ45端子($P_{10}$)线序确认 如图1和图2所示，从左向右数，端子与RJ45的线序为: 8,7,6,5,4,3,2,1 请用万用表检测最左侧的接线端子与RJ45最左侧的线是否联通来检测顺序是否正确 正面 1 正面俯看图 2 零件加工 电源线加工与安装(接线端子的详细安装步骤为图1-5) 材料($C_4$)：剥离各电线自身绝缘层，让铜线裸露约1cm左右 1 材料($C_{15}&#43;2\times C_{16}$)：找到对应颜色的接线端子 2 将裸露的铜线完全插入接线端子，使铜线头从端子顶端露出 3 使用打线钳将接线端子与铜线进行固定 4 使用剪线钳将多余的露出端子头的裸露铜线减除 5 将电线按如图所示链接到电源($P_1$)上 6 Dim槽裁剪 从$P_7$的原材料上，截取10个孔的Dim槽(见图2)，零件编号$D_{10}$ 裁剪时，从$P_7$的左侧开始数10个孔，在10和11孔中间使用锯子将零件截取下来 材料($P_7$) 1 加工得到零件$D_{10}$ 2 变送器电源线线缆裁剪与加工 变送器电源线线缆裁剪 将90cm的红黑两色电线裁剪成如下尺寸和数量。
材料名称 长度(cm) 数量 红色电线($C_1$) 6 9 黑色电线($C_2$) 6 9 红色电线($C_1$) 36 1 黑色电线($C_2$) 36 1 变送器电源线线缆加工 材料($C_1, C_2$)：裁剪后材料图 1 调整剥线钳限位器到1/2 2 电线顶住位置器进行剥线 3 所有电线两头剥除绝缘层 4 两端使用E0508，中间使用TE0508 5 零件成品，黑色零件与红色一致 6 变送器信号线 变送器信号线裁剪 需要将540cm(实际需要532cm)4芯信号线($C_3$)裁剪成如下尺寸和数量。
材料编号 长度(cm) 数量 $SL_{16}$ 16 10 $SL_{24}$ 24 1 $SL_{30}$ 30 2 $SL_{36}$ 36 3 $SL_{42}$ 42 2 $SL_{48}$ 48 2 变送器信号线加工 材料($C_3$)：按尺寸要求裁剪信号线 1 调整剥线钳限位器到最大 2 将线缆头与限位器右外侧对齐并剥线 3 剥离外侧绝缘层的线缆 4 调整剥线钳限位器到$\sfrac{1}{4}与\sfrac{1}{2}$中间位置 5 将线缆头与限位器左内侧对齐并剥线 6 剥离内侧绝缘层的线缆 7 使用对应颜色E0306材料 8 使用夹线钳对材料进行加工 9 变送器信号线阶段效果图 按照加工步骤1得到结果 1 完成所有步骤得到结果 2 部件装配 组装Dim槽 配件($P_6$)：将Dim槽倒放，注意左右下脚的三角铁为下边 1 零件($D_{10}$)：从左向右数，将2,3号螺丝卸下 2 将$D_{10}$的3,8号孔与$P_6$的2,3号孔对齐 3 拧入螺丝，将$D_{10}$固定在$P_6$上 4 准备配件($2\times P_3 &#43; P_4 &#43; 2\times P_8$) 5 将配件按如图位置安装 6 翻转$P_6$，准备配件($P_2 &#43; 10\times P_5 &#43; P_1$) 7 按顺序从左到右依次安装。注意$P_{5}$的1-6号口在上，7-12号口在下 8 成品顶视图，注意背面$P_{3},P_{4}$按$P_{5}$居中 9 RJ45端子台(RJ45双端子台$P_3或RJ45单端子台P_4$)到变送器($P_5$)信号线接线方式 注意事项与接线方式 此处将一个$P_3$当作两个$P_4$，即此处一共有5个$P_4$ (见上图9成品顶视图) 按上图9成品顶视图从左向右进行编号 一个$P_4$加2个$P_5$组成一组。即：$(P_41, P_5[1,2]),(P_42, P_5[3,4]),\cdots,(P_45, P_5[9,10])$ 下面表格接线按照一组配件($P4+2\times P_5$)进行说明 表格中左和右分别表示每组$P_5$中的左右$P_5$ 文字下标数字表示$P_5$的接口编号 文字上标数字表示$P_4$的接口编号 文字颜色表示使用的$C3$线缆中的4种颜色 此处统一使用$SL_{16}$线缆进行连接 注：为了方便$P_4$线缆连接，建议先接5,6,7,8口，再接1,2,3,4口 注：为了方便$P_5$线缆连接，建议先接1,3口，再接4,6口 $\color{red}左_6^1$ $\color{Goldenrod}左_4^2$ $\color{green}左_3^3$ $\color{black}左_1^4$ $\color{red}右_6^5$ $\color{Goldenrod}右_4^6$ $\color{green}右_3^7$ $\color{black}右_1^8$ 端口照片以及接线示例 $P_5$输入端口编号:1,2,3,4,5,6 1 $P_5$对应接线图 2 $P_4$端口编号:1,2,3,4,5,6,7,8 3 $P_4$对应接线图 4 总装效果图 5 数字采集器端子台($P_2$)到变送器($P_5$)接线方式 变送器编号与线材表 按Dim槽装配图9顶视图从左向右对$P_5$编号1-10 表头上标为$P_5$的编号，内容为对应$P_5$编号所使用的线材编号 $P_5^1$ $P_5^2$ $P_5^3$ $P_5^4$ $P_5^5$ $P_5^6$ $P_5^7$ $P_5^8$ $P_5^9$ $P_5^{10}$ $SL_{30}$ $SL_{30}$ $SL_{36}$ $SL_{36}$ $SL_{24}$ $SL_{42}$ $SL_{42}$ $SL_{48}$ $SL_{48}$ $SL_{36}$ $P_5$输出接口接线方式 7: $\color{red}信号(红色)$ 8: $\color{Goldenrod}信号(黄色)$ 9: $\color{green}信号(绿色)$ 10: $\color{black}信号(黑色)$ 11: $\color{black}电源(黑色)$ 12: $\color{red}电源(红色)$ $P_2$接线表 数字表示$P_2$丝印上的编号。 数字的下标数字表示对应的 $P_5$的编号 ，如上表可知对应 编号所用线材标号 。 数字自身的颜色以及上标角标的颜色表示连接线对应的颜色。 具体接线效果见下图5效果 52 $\color{black}53_4^黑$ $\color{green}54_4^绿$ $\color{Goldenrod}55_4^黄$ $\color{red}56_4^红$ $\color{black}57_3^黑$ $\color{green}58_3^绿$ $\color{Goldenrod}59_3^黄$ $\color{red}60_3^红$ $\color{black}61_2^黑$ $\color{green}62_2^绿$ $\color{Goldenrod}63_2^黄$ $\color{red}64_2^红$ $\color{black}65_1^黑$ $\color{green}66_1^绿$ $\color{Goldenrod}67_1^黄$ $\color{red}68_1^红$ $\color{black}18_9^黑$ $\color{green}19_9^绿$ $\color{Goldenrod}20_9^黄$ $\color{red}21_9^红$ $\color{black}22_8^黑$ $\color{green}23_8^绿$ $\color{Goldenrod}24_8^黄$ $\color{red}25_8^红$ $\color{black}26_7^黑$ $\color{green}27_7^绿$ $\color{Goldenrod}28_7^黄$ $\color{red}29_7^红$ $\color{black}30_6^黑$ $\color{green}31_6^绿$ $\color{Goldenrod}32_6^黄$ $\color{red}33_6^红$ 34 1 2 3 4 5 6 7 8 9 10 11 12 $\color{green}13_{10}^绿$ $\color{black}14_{10}^黑$ $\color{Goldenrod}15_{10}^黄$ $\color{red}16_{10}^红$ 17 35 36 37 38 39 40 41 42 43 44 45 46 47 $\color{green}48_5^绿$ $\color{black}49_5^黑$ $\color{Goldenrod}50_5^黄$ $\color{red}51_5^红$ 阶段图片示例 底视图 1 先链接所有$P_5$的电源线 2 电源线另一头连接到$P_1$ 3 根据《变送器编号与线材表》连接信号线到所有$P_5$ 4 再根据《$P_2$接线表》连接信号线到$P_2$ 5 注意$P_2$信号线在Dim槽上的走线 6 阶段检测 使用万用表的检测功能检测$P_4$到$P_5$之间的接线顺序是否正确 使用万用表的检测功能检测$P_2$到$P_5$之间的接线顺序是否正确 RJ45端子($P_{10}$)与电流传感器($P_9$)的组装 $P_{10}$到$P_9$的组装步骤 红、黄、绿三色传感器为一组，使用1个$P_9$表示。每$P_9$需使用TE0508与E0306对导线头重新处理，如图1-4 2个$P_9$加一个$P_{10}$为一个六轴机器人采集单元 下表中，表头上标为$P_{10}$的端口编号，按从左向右编号为8-1 表格内容中的数字为传感器组的编号，1即为第一组，2即为第二组 表格内容中的数字颜色与上标表示接线颜色，有下标为&quot;负&quot;的表示每组传感器共负极导线(即图2中，三色花线合并起来的线) $P_{10}^8$ $P_{10}^7$ $P_{10}^6$ $P_{10}^5$ $P_{10}^4$ $P_{10}^3$ $P_{10}^2$ $P_{10}^1$ $\color{black}2_负^黑$ $\color{green}2^绿$ $\color{Goldenrod}2^黄$ $\color{red}2^红$ $\color{black}1_负^黑$ $\color{green}1^绿$ $\color{Goldenrod}1^黄$ $\color{red}1^红$ $P_{10}$RJ45端子与$P_9$电流传感器图例 红、黄、绿三色传感器一组为一个$P_9$ 1 将每组的花色线使用剥线钳处理后，用打线钳加装TE0508组成共负极导线 2 三色纯色线用剥线钳处理后，用打线钳加装E0306 3 每组传感器装完端子后的效果图 4 $2\times P_9&#43;P_{10}$为一个六轴机器人采集单元 5 按如图颜色和顺序固定$P_9和p_{10}$ 6 数据采集套件组装完成 包括一个Dim槽(包括端子台、变送器和电源)&#43;5个六轴机器人采集单元 ]]></content></entry><entry><title>Using Ghostscript</title><url>/posts/202211/ghostscript/</url><categories><category/></categories><tags><tag>ghostscript</tag><tag>pdf</tag></tags><content type="html">Ghostscript介绍 Ghostscript 是 PostScript®和可移植文档格式(PDF)文件的解释器。
Ghostscript 由 PostScript解释器层和图形库组成。图形库与Ghostscript系列中的所有其他产品共享，因此所有这些技术有时都称为 Ghostscript，而不是更正确的 GhostPDL。
GhostPDF: GhostPDF是PDF页面描述语言的解释器。 GhostPDL: 我们使用 GhostPDL 作为一个总称来涵盖我们的整个产品线。现在，我们将所有这些不同的产品整合到一个包中，恰当地称为 GhostPDL。除了我们现有的 PDL 模块（PS、PDF、PCL、PXL 和 XPS）之外，我们现在还添加了新模块来处理一系列常见的图像格式。安装这些后，GhostPDL 将处理 JPEG（JFIF 和 EXIF）、PWG、TIFF、PNG、JBIG2 和 JPEG2000。 GhostPCL: GhostPCL是PCL™和PXL文件的解释器。这包括一个连接到Ghostscript图形库的PCL/PXL解释器。 GhostXPS: GhostXPS是XPS（XML Paper Specfication）文件的解释器。这包括一个连接到Ghostscript图形库的XPS解释器。 URW Font Information: urwfonts 目录中的一组truetype字体是PCL/XL解释器正常运行所必需的，但它们不是免费软件，也不是在GNU GPL/AGPL下分发的。相反，它们可以根据禁止商业用途的AFPL许可证重新分发。 Convert PDF to Images 这里使用该 input.pdf 文件作为转换研究。测试时，现将该文件保存为input.pdf。
常用参数与含义 -dBATCH: 在处理完所有在命令行中命名的文件后退出，而不是进入读取 PostScript 命令的交互式循环。相当于将-c quit放在命令行末尾。 -dNOPAUSE: 禁用提示和每页末尾的暂停。可以理解为连续打印或连续转换文件，不会在每页渲染完毕后有命令行提示出现。 -sDEVICE=: 对应不同的输出类型，可以是打印机，文件类型等 -sOutputFile=: 输出文件参数。可以使用%d或%03d作为文件模板的一部分，Ghostscript将用页码替换该部分。但请注意，并非所有设备都支持该模板。此外，由于某些设备在打开时会写入输出文件，因此可能会写入额外的空白页（pdfwrite、ps2write、eps2write、pxlmono、pxlcolor） -o: 作为输出文件的一种简写。使用该参数时，会自动设置-dBATCH和-dNOPAUSE选项。 -r: 可以使用-rXRESxYRES或-rres的格式设置输出的大小。单位： dots (or pixels) per inch -sPAPERSIZE=: Ghostscript默认使用美国信纸作为其页面大小。可以使用例如-sPAPERSIZE=a4的设置进行页面大小的调整。如果不使用这个参数，则使用下面两个参数： -dDEVICEWIDTHPOINTS=: 宽度 -dDEVICEHEIGHTPOINTS=: 高度 -dFIXEDMEDIA: 系统默认使用-sPAPERSIZE=设置页面大小，如果要启用宽度和高度设置，则需要包含该开关项。 -sPageList=: 页面范围用逗号“,”分隔。每个页面范围可以包括： 单个页码。例如： -sPageList=1,3,5 ；表示只处理1,3,5页 起始页码-结束页码。例如： -sPageList=5-10 ；表示从第5页开始，处理到第10页。 起始页码-。例如：-sPageList=12- ；表示从第12页开始，一直处理到最后一页。 -dFitPage: 此选项设置-dEPSFitPage和-dPDFFitPage选项。 -dPDFFitPage：将PDF文件缩放以适应当前设备页面大小。与-dFIXEDMEDIA选项一起使用，用于将内容调整到页面大小。 -dTextAlphaBits和-dGraphicsAlphaBits: 针对文本和图形内容分别启用抗锯齿。允许的值为1，2或4。至越小渲染越快。 dDownScaleFactor: 内部渲染在输出之前按给定的整数因子按比例缩小,取值&amp;lt;=8。 图像大小 在控制输出不同图像大小时测试发现如下两种组合：
-dDEVICEWIDTHPOINTS=w -dDEVICEHEIGHTPOINTS=h -dFIXEDMEDIA -dPSFitPage: 前三个是控制页面大小，最后一个是将内容填充到页面大小。 -rres: 可以理解为对pdf做等比例缩放。其还有另一种形式-rXRESxYRES，可以分别控制宽和高的缩放比例。例如-r100x50,则高度会被压缩到原来的50%。 这两种组合如果在对pdf输出图像时是等比例缩放，则效果相同。 gs -sDEVICE=png16m -sPageList=4 -dDEVICEWIDTHPOINTS=960 -dDEVICEHEIGHTPOINTS=720 -dFIXEDMEDIA -dPSFitPage -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o png-00.%03d.png input.pdf gs -sDEVICE=jpeg -sPageList=4 -dDEVICEWIDTHPOINTS=960 -dDEVICEHEIGHTPOINTS=720 -dFIXEDMEDIA -dPSFitPage -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o jpg-00.%03d.png input.pdf Convert PDF to png -sDEVICE=png16m: 24-bit RGB color -sDEVICE=pnggray: 8-bit grayscale -sDEVICE=png256: 8-bit color -sDEVICE=png16: 4-bit color -sDEVICE=pngmono: black-and-white gs -sDEVICE=png16m -sPageList=4 -r96 -o png-01.%03d.png input.pdf gs -sDEVICE=png16m -sPageList=4 -r96 -dTextAlphaBits=1 -dGraphicsAlphaBits=1 -o png-02.%03d.png input.pdf gs -sDEVICE=png16m -sPageList=4 -r96 -dTextAlphaBits=2 -dGraphicsAlphaBits=2 -o png-03.%03d.png input.pdf gs -sDEVICE=png16m -sPageList=4 -r96 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o png-04.%03d.png input.pdf gs -sDEVICE=png16m -sPageList=4 -r192 -dDownScaleFactor=2 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o png-05.%03d.png input.pdf gs -sDEVICE=png16m -sPageList=4 -r384 -dDownScaleFactor=4 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o png-06.%03d.png input.pdf gs -sDEVICE=png16m -sPageList=4 -r768 -dDownScaleFactor=8 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o png-07.%03d.png input.pdf 最终选择质量和大小都相对能接受的参数：
gs -sDEVICE=png16m -r96 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o png.%03d.png input.pdf Convert PDF to jpeg -sDEVICE=jpeg: JFIF standard 1.01 -sDEVICE=jpeggray: grayscale -dJPEGQ=: 该等级可平衡压缩程度与重构时图像的保真度。较低的值会从图像中丢弃更多信息以实现更高的压缩率，因此在重构时质量会降低。int, [0,100], 默认75。 -dQFactor=: Adobe的QFactor质量等级，可以使用它来代替上面的JPEGQ。float, [0.0, 1.0]。默认-dJPEGQ=75与-dQFactor=0.5等价。 gs -sDEVICE=jpeg -sPageList=4 -r96 -o jpg-01.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r96 -dTextAlphaBits=1 -dGraphicsAlphaBits=1 -o jpg-02.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r96 -dTextAlphaBits=2 -dGraphicsAlphaBits=2 -o jpg-03.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r96 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o jpg-04.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r192 -dDownScaleFactor=2 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o jpg-05.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r384 -dDownScaleFactor=4 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o jpg-06.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r768 -dDownScaleFactor=8 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o jpg-07.%03d.jpg input.pdf gs -sDEVICE=jpeg -sPageList=4 -r192 -dDownScaleFactor=2 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -dQFactor=70 -o jpg-08.%03d.jpg input.pdf 最终选择质量和大小相对能接受的参数：
gs -sDEVICE=jpeg -r192 -dDownScaleFactor=2 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -o jpg.%03d.jpg input.pdf Show PDF -dBATCH: 在处理完所有在命令行中命名的文件后退出，而不是进入读取 PostScript 命令的交互式循环。相当于将-c quit放在命令行末尾。 gs -dBATCH input.pdf Reference Console Options Devices</content></entry><entry><title>Classification</title><url>/posts/202211/03-classification/</url><categories><category>machine-learning</category></categories><tags><tag>classification</tag></tags><content type="html"><![CDATA[Classification: Given options(classes), the function outputs the correct one.
Probabilistic Generative Model features and predict target 一共有7个features，其中 Total = HP + Attack + Deffense + SP Atk + Sp Def + Speed predict target: type of pokemon features and predict target How to do Classification 收集Training data for Classification 考虑如果做分类？ Classification as Regression?（分类问题是否可以用回归算法处理？） 以二分类举个例子
Training: Class 1 means the target is 1; Class 2 means the target is -1 Testing: $ \text{closer to 1} \rightarrow \text{class 1}; \text{closer to -1} \rightarrow \text{class 2} $ 这样直接用Regression来解决Classification的问题，会发生如下图的情况：
当样本feature如左图所示，则$y=b+w_1x_1+w_2x_2$的函数可以很好的工作。 当样本feature如右图所示，由于右下角的数据，导致Regression的Loss函数在求最小值时，会倾向于给出紫色的线段的方程。即Loss函数会由于“太正确”而导致最终预测结果出错。 Penalize to the examples that are &ldquo;too correct&rdquo; &hellip; (Bishop, P186) Classification as Regression Ideal Alternatives(理想的做法) Function (Model): $$ \delta(x) \Rightarrow \begin{cases} g(x) &gt; 0 &amp; \text{Output = class 1} \cr else &amp; \text{Output = class 2} \end{cases} $$ Loss Function The number of times f get incorrect results on training data. $$ L(f) = \sum_n\delta(f(x^n) \ne \hat{y}^n ) $$ Find the best function: Example: Perceptron, SVM Generative Model $P(C_1)$是从两个分类中，随机选中Class1的几率，$P(C_2)$是从两个分类中，随机选中Class2的几率。 假设x为其中一种颜色的圆圈，则：$P(x|C_1)$表示从Class1中选中x的几率，$P(x|C_2)$表示从Class2中选中x的几率， 选中x属于class1的几率就是：$ P(C_1|x) = \frac{P(C_1)P(x|C_1)}{P(C_1)P(x|C_1)+P(C_2)P(x|C_2)} $ 选中x的总几率就是： $ P(x) = P(x|C_1)P(C_1) + P(x|C_2)P(C_2) $ Estimating the Probabilities From training data, 这整个想法就叫做Generative Model Generative Model Gaussian Distribution $ f_{\mu,\sum}(x) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum|^{1/2}} exp \{ -\frac{1}{2}(x-\mu)^T\sum^{-1}(x-\mu) \} $ input: vector x, output: probability of sampling x(实际是probability density，概率密度与概率成正比,此处简略为概率) The shape of the function determines by mean $\mu$ and covariance matrix $\sum$(协方差矩阵) Gaussian Distribution Maximum Likelihood（找mean$\mu$和covariance matrix $\Sigma$的方法） mean $\mu$控制原点的位置。 covariance matrix $\Sigma$决定图形的形状。 虽然图中左下角的点都可以求出相对于两个圈的概率，但是这两个概率的大小是不一样的。 给定一个Gaussian的$\mu$和$\Sigma$,就可以求出对应的Likelihood: $ L(\mu, \Sigma) = f_{\mu, \Sigma}(x^1)f_{\mu, \Sigma}(x^2)f_{\mu, \Sigma}(x^3)\dots\dots f_{\mu, \Sigma}(x^n) $ 这里的每一个$f_{\mu, \Sigma}(x^1)$展开，都是$ f_{\mu,\sum}(x) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum|^{1/2}} exp \{ -\frac{1}{2}(x-\mu)^T\sum^{-1}(x-\mu) \} $ Maximum Likelihood: $ \mu^*, \Sigma^* = arg \max\limits_{\mu, \Sigma} L(\mu, \Sigma) $ $\mu^*$为取x的平均值: $ \mu^* = \frac{1}{n}\sum\limits_{i=1}^n x^i $ $ \Sigma^* = \frac{1}{n} \sum\limits_{i=1}^n(x^i-\mu^*)(x^i-\mu^*)^T $ Maximum Likelihood 采用上诉方法得到的测试结果 features $\theta$ test accuracy Defense,SP Defense $ \mu^1, \mu^2 $ : 2-dim vector $\Sigma^1, \Sigma^2$: 2*2 matrices 47% All the 7 features $ \mu^1\dots\mu^7 $ : 7-dim vector $\Sigma^1\dots\Sigma^7$: 7*7 matrices 54% 结果不理想，需要重新调整模型。 Modifying Model (Ref: Bishop chapter 4.2.2) 给每一个Gaussian有一个自己的$\mu$和自己的covariance matrix $\Sigma$是很少见的 常见的做法是，不同的Class对应的Gaussian可以share相同的covariance matrix $\Sigma$ Share Covariance matrix 模型修改后如何计算$\mu$和$\Sigma$ 假设有数量为n的class1,数量为m的class2 likelihood: \begin{align} L(\mu^1, \mu^2, \Sigma) = &amp; f_{\mu^1, \Sigma}(x^1)f_{\mu^1, \Sigma}(x^2)\dots\dots f_{\mu^1, \Sigma}(x^n) \cr \times &amp;f_{\mu^2, \Sigma}(x^{n+1})f_{\mu^2, \Sigma}(x^{n+2})\dots\dots f_{\mu^2, \Sigma}(x^{n+m}) \end{align} 如下图， $\mu^1$, $\mu^2$和原来一样计算: \begin{align} \mu^1 &amp; = \frac{1}{n}\sum\limits_{i=1}^n x^i \cr \mu^2 &amp; = \frac{1}{m}\sum\limits_{i=1}^m x^i \end{align} $\Sigma^*$的计算修改为：$ \Sigma = \frac{n}{n+m}\Sigma^1 + \frac{m}{n+m}\Sigma^2 $ Compute 模型修改后画出的图形 从原来的曲线，变成了一条直线 由于边界(boundary)是一条直线，所以这种模型也叫做Linear Model。 在这个模型下，考虑所有的7个features进行计算，则accuracy从原来的54%上升到73% 总结一下3个步骤 Function Set(Model): \begin{align} P(C_1|x) &amp;= \frac{P(C_1)P(x|C_1)}{P(C_1)P(x|C_1)+P(C_2)P(x|C_2)} \cr &amp; \begin{cases} \text{if} P(C_1|x) &gt; 0.5 &amp; \text{, output: class 1} \cr Otherwise &amp; \text{, output: class 2} \end{cases} \end{align} Goodness of a function: The mean $\mu$ and covariance $\Sigma$ that maximizing the likelihood(the probability of generating data) Find the best function: easy Probability Distribution You can always use the distribution you like 假设$P(x|C^1)$构成Class1的x有K个，且K个x想对于Class1的几率是独立的，则：$ P(x|C1) = P(x_1|C_1)P(x_2|C_1)\cdots P(x_K|C_1) $，这个会得到1-D Gaussian,参数会进一步简化 For binary features, you may assume they are from Bernouli distributions. If you assume all the dimensions are independent, then you are using Naive Bayes Classifier. Posterior Probability 设有表达式(1)上下同时除上表达式$ P(C_1)P(x|C_1) $得到表达式(2) 设$ z = ln\frac{P(C_1)P(x|C_1)}{P(C_2)P(x|C_2)} $,则表达式(2)变为表达式(3) 表达式(3)和(4)等价，为Sigmoid Function \begin{align} P(C_1|x) &amp;= \frac{P(C_1)P(x|C_1)}{P(C_1)P(x|C_1)+P(C_2)P(x|C_2)} \tag{1} \cr &amp;= \frac{1}{1+\frac{P(C_2)P(x|C_2)}{P(C_1)P(x|C_1)}} \tag{2} \cr &amp;= \frac{1}{1 + exp^{-z}} \tag{3} \cr &amp;= \sigma(z) \tag{4} \end{align} 求z 设$N_1$是Class1出现的次数，$N_2$是Class2出现的次数 表达式(3)和(4)为Gaussian的Distribution 表达式(5)上下同时除以$\frac{1}{(2\pi)^{D/2}}$得到表达式(6) \begin{align} z &amp;= ln\frac{P(C_1)P(x|C_1)}{P(C_2)P(x|C_2)} \cr &amp;= ln\frac{P(C_1)}{P(C_2)} + ln\frac{P(x|C_1)}{P(x|C_2)} \tag{1} \cr ln\frac{P(C_1)}{P(C_2)} &amp;=\frac{\frac{N_1}{N_1+N_2}}{\frac{N_2}{N_1+N_2}} = \frac{N_1}{N_2} \tag{2} \cr P(x|C_1) &amp;= \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^1|^{1/2}} exp \{ -\frac{1}{2}(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) \} \tag{3} \cr P(x|C_2) &amp;= \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^2|^{1/2}} exp \{ -\frac{1}{2}(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2) \} \tag{4} \cr
ln\frac{P(x|C_1)}{P(x|C_2)} &amp;= ln\frac{\frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^1|^{1/2}} exp \{ -\frac{1}{2}(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) \}} {\frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^2|^{1/2}} exp \{ -\frac{1}{2}(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2) \}} \tag{5} \cr &amp;= ln\frac{\frac{1}{|\Sigma^1|^{1/2}} exp \{ -\frac{1}{2}(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) \}} {\frac{1}{|\Sigma^2|^{1/2}} exp \{ -\frac{1}{2}(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2) \}} \tag{6} \cr &amp;= ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}}exp \{ -\frac{1}{2}[(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) - (x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2)] \} \tag{7} \cr &amp;= ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}} - \frac{1}{2}[(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) - (x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2)] \tag{8} \cr (x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) &amp;= x^T(\Sigma^1)^{-1}x - x^T(\Sigma^1)^{-1}\mu^1 - (\mu^1)^T(\Sigma^1)^{-1}x + (\mu^1)^T(\Sigma^1)^{-1}\mu^1 \cr &amp;= x^T(\Sigma^1)^{-1}x - 2(\mu^1)^T(\Sigma^1)^{-1}x + (\mu^1)^T(\Sigma^1)^{-1}\mu^1 \cr (x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2) &amp;= x^T(\Sigma^2)^{-1}x - 2(\mu^2)^T(\Sigma^2)^{-1}x + (\mu^2)^T(\Sigma^2)^{-1}\mu^2 \cr z &amp;= ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}} - \frac{1}{2}x^T(\Sigma^1)^{-1}x + (\mu^1)^T(\Sigma^1)^{-1}x - \frac{1}{2}(\mu^1)^T(\Sigma^1)^{-1}\mu^1 \cr &amp;+ \frac{1}{2}x^T(\Sigma^2)^{-1}x - (\mu^2)^T(\Sigma^2)^{-1}x + \frac{1}{2}(\mu^2)^T(\Sigma^2)^{-1}\mu^2 + ln\frac{N_1}{N_2} \end{align} 求 $\sigma(z)$ 当$ \Sigma_1 = \Sigma_2 = \Sigma $时，表达式(1)变为表达式(2) 设: $ w^T = (\mu_1 - \mu_2)^T\Sigma^{-1} $以及$ b = -\frac{1}{2}(\mu^1)^T(\Sigma^1)-1\mu^1 + \frac{1}{2}(\mu^2)^T(\Sigma^2)-1\mu^2 + ln\frac{N_1}{N_2} $则(2)可以推导为(3) In generative model, we estimate $ N_1, N_2, \mu^1, \mu^2, \Sigma $, then we have w and b. \begin{align} z &amp;= ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}} - \frac{1}{2}x^T(\Sigma^1)^{-1}x + (\mu^1)^T(\Sigma^1)^{-1}x - \frac{1}{2}(\mu^1)^T(\Sigma^1)^{-1}\mu^1 \cr &amp;+ \frac{1}{2}x^T(\Sigma^2)^{-1}x - (\mu^2)^T(\Sigma^2)^{-1}x + \frac{1}{2}(\mu^2)^T(\Sigma^2)^{-1}\mu^2 + ln\frac{N_1}{N_2} \tag{1}\cr &amp;= (\mu_1 - \mu_2)^T\Sigma^{-1}x -\frac{1}{2}(\mu^1)^T(\Sigma^1)-1\mu^1 + \frac{1}{2}(\mu^2)^T(\Sigma^2)-1\mu^2 + ln\frac{N_1}{N_2} \tag{2}\cr &amp;= w \cdot x + b \tag{3} \cr P(C_1|x) &amp;= \sigma(z) \cr &amp;= \sigma(w \cdot x + b) \end{align} How about directly find w and b? reference video ]]></content></entry><entry><title>Regression</title><url>/posts/202211/02-regression/</url><categories><category>machine-learning</category></categories><tags><tag>regression</tag></tags><content type="html"><![CDATA[Regression: Input a vector, the function outputs a scalar.
单参数到历史多参数的模型演进 使用简单模型 预测问题：根据前面的浏览数据，预测后面的浏览量
Function with Unknown Parameters Model: $y = b + wx_1$ $y$(Label): no. of views on 2/26， $x_1$(feature): no. of views on 2/25 $w$(weight) and $b$(bias) are unknown parameters (learned from data) Define Loss from Training Data Loss is a function of parameters: $L(b, w)$ Loss: how good a set of values is. Loss: $ L = \frac{1}{N}\sum\limits_{n=1}^N e_n$ $e = |y - \hat{y}|$ $L$ is mean absolute error (MAE) $e = (y-\hat{y})^2$ $L$ is mean square error (MSE) if $y$ and $\hat{y}$ are both probability distributions, then use Cross-Entropy 使用不同的参数，计算出来的Loss画出来的等高线图叫做：Error Surface 等高线图: Error Surface Optimization 找一个$w$和$b$，使$L$最小： $ w^*, b^* = arg \min\limits_{w, b} L$ 这种找到最小$w$和$b$的方法叫做：Gradient Descent
简述Gradient Descent过程 以一个参数$w$为例描述Gradient Descent的过程:
随机初始化点$w^0$ 计算$w=w^0$时，对$L$的微分是多少：$\frac{{\partial}L}{{\partial}W}|_{w=w^0}$ 如果计算出来的结果为负数，则增加$w$ 如果计算出来的结果为正数，则减少$w$ 增加或减少的数值为：${\color{red}\eta}\frac{{\partial}L}{{\partial}W}|_{w=w^0}$, $\color{red}\eta$:叫learning rate,是一个hyperparameter 这个过程用的数学表达式是：$ w^1 \leftarrow w^0 - {\color{red}\eta}\frac{{\partial}L}{{\partial}W}|_{w=w^0} $ 重复上述步骤不断更新$w$。两种状况会停下来: 更新的次数达到预设值 微分为0 当两个参数$w$, $b$时:
随机初始化$w^0$, $b^0$ 计算两个微分值 $ \frac{\partial L}{\partial w}|_{w=w^0, b=b^0} $ 用$w$的微分更新$w$的值 $ w^1 \leftarrow w^0 - {\color{red}\eta}\frac{\partial L}{\partial w}|_{w=w^0, b=b^0} $ $ \frac{\partial L}{\partial b}|_{w=w^0, b=b^0} $ 用$b$的微分更新$b$的值 $ b^1 \leftarrow b^0 - {\color{red}\eta}\frac{\partial L}{\partial b}|_{w=w^0, b=b^0} $ Update $w$ and $b$ interatively 使用单参数的多个连续的历史记录 通过观察资料发现数据有7天为一个周期，所以使用新的公式进行调整, 并得到下面数据：
days function training loss testing loss 1 $ y = b + wx_{\color{red}1} $ $ L = 0.48k $ $ L&rsquo; = 0.58k $ 7 $ y = b + \sum\limits_{j=1}^{\color{red}7}w_jx_j $ $ L = 0.38k $ $ L&rsquo; = 0.49k $ 28 $ y = b + \sum\limits_{j=1}^{\color{red}28}w_jx_j $ $ L = 0.33k $ $ L&rsquo; = 0.46k $ 56 $ y = b + \sum\limits_{j=1}^{\color{red}56}w_jx_j $ $ L = 0.32k $ $ L&rsquo; = 0.46k $ 上述模型有个共同的名字Linear Models
调整模型参数，观察Training Loss和Testing Loss的变化，挑选合适的模型 名词解释 hyperparameter: 需要人来设置的参数
local minima: 局部最小值
global minima: 全局最小值
总结Machine Learning训练的简单步骤 function with unknown define loss from training data optimization 打破模型局限 不同的w和不同的b对Linear Models的影响如蓝色线。红色表示可能的真实趋势。这种来自于Model的限制叫做Model Bias。 Linear Models的局限性 All Piecewise Linear Curves All Piecewise Linear Curves = constant + sum of a set of Hard Sigmoid Piecewise Linear Curves sigmoid \begin{align*} y &amp;= {\color{red}c}\frac{1}{1+e^{-({\color{green}b}+{\color{blue}w}x_1)}} \cr &amp;= {\color{red}c}\,sigmoid({\color{green}b}+{\color{blue}w}x_1) \end{align*}
调整$ {\color{blue}w}, {\color{green}b}, {\color{red}c} $对应的函数图像 Sigmoid Parameters 相对于红色线段，可以用多个Sigmoid函数组合出来，将0:constant和1,2,3sigmoid加起来就是红色线段
\begin{align*} b\tag{0}\cr {\color{red}c_1}\,sigmoid({\color{green}b_1}+{\color{blue}w_1}x_1)\tag{1}\cr {\color{red}c_2}\,sigmoid({\color{green}b_2}+{\color{blue}w_2}x_1)\tag{2}\cr {\color{red}c_3}\,sigmoid({\color{green}b_3}+{\color{blue}w_3}x_1)\tag{3}\cr \textcolor{red}{\text{red curve}}\text{ will be:} \cr y = b + \sum_{i=1}^3{\color{red}c_i}\,sigmoid({\color{green}b_i}+{\color{blue}w_i}x1) \end{align*}
Sigmoid Parameters 基于sigmoid的模型，对原来的模型进行调整如下： \begin{align*} y &amp;= b+wx_1 \cr &amp; \Downarrow \cr y &amp;= b + \sum_{i=1}^n {\color{red}c_i} \, sigmoid({\color{green}b_i}+{\color{blue}w_i}x_i) \cr y &amp;= b + \sum_{j=1}^m w_jx_j \cr &amp; \Downarrow \cr y &amp;= b + \sum_{i=1}^n {\color{red}c_i} \, sigmoid({\color{green}b_i}+\sum_{j=1}^m{\color{blue}w_{ij}}x_j) \end{align*}
使$n=3, m=3$对表达式$y = b + \sum_{i=1}^n {\color{red}c_i} \, sigmoid({\color{green}b_i}+\sum_{j=1}^m{\color{blue}w_{ij}}x_j)$进行展开 \begin{align*} r_1 &amp;= {\color{green}b_1} + {\color{blue}w_{11}}x_1 + {\color{blue}w_{12}}x_2 + {\color{blue}w_{13}}x_3 \cr r_2 &amp;= {\color{green}b_2} + {\color{blue}w_{21}}x_1 + {\color{blue}w_{22}}x_2 + {\color{blue}w_{23}}x_3 \cr r_3 &amp;= {\color{green}b_3} + {\color{blue}w_{31}}x_1 + {\color{blue}w_{32}}x_2 + {\color{blue}w_{33}}x_3 \cr &amp;\Downarrow \cr \begin{bmatrix} r_1 \cr r_2 \cr r_3 \end{bmatrix} &amp;= \begin{bmatrix} {\color{green}b_1} \cr {\color{green}b_2} \cr {\color{green}b_3} \end{bmatrix} + \begin{bmatrix} {\color{blue}w_{11}} &amp; {\color{blue}w_{12}} &amp; {\color{blue}w_{13}} \cr {\color{blue}w_{21}} &amp; {\color{blue}w_{22}} &amp; {\color{blue}w_{23}} \cr {\color{blue}w_{31}} &amp; {\color{blue}w_{32}} &amp; {\color{blue}w_{33}} \cr \end{bmatrix} \begin{bmatrix} x_1 \cr x_2 \cr x_3 \end{bmatrix} \end{align*}
其中$\color{red}\sigma$表示sigmoid表达式 Sigmoid 展开图示 如下图所示，x为feature；而所有的$W, {\color{green}b}, c^T, b$作为unknown parameters展开为一个长的一维向量，定义为$\color{red}\theta$ unknown parameters Loss function Loss is a function of parameters $L(\theta)$ Loss means how good a set of values is. Optimization of New Model $ \theta^* = arg\,\min\limits_\theta L$
(Randomly) Pick initial values $\theta^0$ 对所有参数$\theta$对$L$做微分，这里的$g$叫做gradient \begin{align} gradient \Leftarrow g &amp;= \begin{bmatrix} {\frac{\partial L}{\partial\theta_1}|_{\theta=\theta^0}} \cr {\frac{\partial L}{\partial\theta_2}|_{\theta=\theta^0}} \cr \vdots \end{bmatrix} \cr g &amp;= \nabla L(\theta^0) \end{align} 然后进行参数更新 $$ \begin{bmatrix} \theta_1^1 \cr \theta_2^1 \cr \vdots \end{bmatrix} \leftarrow \begin{bmatrix} \theta_1^0 \cr \theta_2^0 \cr \vdots \end{bmatrix} - \begin{bmatrix} {\color{red}\eta}\frac{\partial L}{\partial\theta_1}|_{\theta=\theta^0} \cr {\color{red}\eta}\frac{\partial L}{\partial\theta_2}|_{\theta=\theta^0} \cr \vdots \end{bmatrix} $$ $$ \theta^1 \leftarrow \theta^0 - {\color{red}\eta}g $$ Compute gradient $ g = \nabla L(\theta^0) $ 全部资料是$L$,批次编号为$L^1, L^2, L^3$。batch是进行参数更新的单位，即一个批次进行一次参数更新；epoch表示所有批次全部执行了参数更新。 batch and epoch 使用$ Sigmoid \rightarrow ReLU $ Rectified Linear Unit (ReLU): $ {\color{red}c}\,max(0, {\color{green}b} + {\color{blue}w}x_1) $ 类似sigmoid和ReLU的函数在机器学习中叫做Activation function 作个数不同的ReLU only one layer input features are the no. of views in the past 56 days model training loss testing loss linear 0.32k 0.46k 10ReLU 0.32k 0.45k 100ReLU 0.28k 0.43k 1000ReLU 0.27k 0.43k 作多层ReLU 100 ReLU for each layer input features are the no. of views in the past 56 days Better on training data, worse on unseen data: Overfittin , see layer count 4. layer count training loss testing loss 1 0.28k 0.43k 2 0.18k 0.39k 3 0.14k 0.38k 4 0.10k 0.44k Backpropagation Backpropgation: an efficient way to compute $\sfrac{\partial L}{\partial w}$
Gradient Descent 对每一个参数针对L进行偏微分得到: $\nabla L(\theta)$ 使用batch的数据对参数$\theta$进行更新. Gradient Descent Chain Rule case 1: $\frac{dz}{dx}=\frac{dz}{dy}\frac{dy}{dx}$ case 2: $\frac{dz}{ds}=\frac{dz}{dx}\frac{dx}{ds}+\frac{dz}{dy}\frac{dy}{ds}$ Chain Rule Forward and Backward pass: Forward pass: Compute $\sfrac{\partial z}{\partial w}$for all parameters Backward pass: Compute $\sfrac{\partial C}{\partial z}$ for all activation function inputs z Forward and Backward pass Regularization Regularization出现的背景：当原始数据有过多的feature和模型有大量的w，可能存在某些feature确实与最终的结果无关，在这种情况下可以先将所有feature包含进来，然后通过Regularization的思路对w进行优化，从而降低无效feature对最终结果的影响。
假设Model Function为$ y = b + \sum w_i x_i $ 原来定义的Loss Function为$ L = \sum\limits_n( \hat{y}^n - ( b + \sum w_i x_i ) )^2$ Regularization既是在上面Loss Function的基础上加上红色部分: $ L = \sum\limits_n( \hat{y}^n - ( b + \sum w_i x_i ) )^2 + \color{red}\lambda\sum(w_i)^2$ The functions with smaller $w_i$ are better Why smooth functions are preferred? If some noises corrupt input $x_i$ when testing. A smoother function has less influence. 因为在进行预测时，有噪音输入的情况下，越smooth的function对输出造成的影响越不敏感。 其中的$\lambda$也是一个hyperparameter 当我们调整$\lambda$的值，观察Loss的变化是，我们可以观察到如下信息：
$\lambda$越大时，Regularization项影响就越大，整个function就越平滑 Training随着$\lambda$的增加而增加 Testing随着$\lambda$的增加先减少再增加 We prefer smooth function, but don&rsquo;t be too smooth. 所以$\lambda$的选择值选择在Testing的Loss的转折点处 Regularization Loss TODO: 完成$ X \rightarrow X^x $的模型演进 Reference Video ]]></content></entry><entry><title>Mpv常用配置</title><url>/posts/202211/mpv-config/</url><categories><category>blog</category></categories><tags><tag>mpv</tag></tags><content type="html"><![CDATA[配置文件位置 系统范围的配置文件&rsquo;mpv.conf&rsquo;位于您的配置目录中（例如 /etc/mpv 或 /usr/local/etc/mpv）。 用户特定的文件是~/.config/mpv/mpv.conf。 有关详细信息和平台细节（特别是 Windows 路径），请参阅文件部分。
用户特定的选项会覆盖系统范围的选项，而命令行上给出的选项也会覆盖。配置文件的语法是 option=value。 #之后的所有内容都被视为注释。可以通过将它们设置为 yes 来启用没有值的选项，并通过将它们设置为 no 来禁用它们。
Screenshot常用配置 screenshot-format=&#34;jpg&#34; screenshot-template=&#34;%F%n&#34; screenshot-directory=&#34;~/Pictures/mpv-shot&#34; screenshot-jpeg-quality=70 screenshot-png-compression=9 screenshot-format 设置用于保存屏幕截图的图像文件类型。png, jpg(default), jpeg, webp, jxl
screenshot-template 指定用于保存屏幕截图的文件名模板。模板指定没有文件扩展名的文件名，并且可以包含格式说明符，在截屏时将被替换。 默认情况下，模板是 mpv-shot%n，这会产生像mpv-shot0012.png这样的文件名。
模板可以以相对或绝对路径开头，以指定应保存屏幕截图的目录位置。
如果最终的屏幕截图文件名指向一个已经存在的文件，则该文件不会被覆盖。屏幕截图将不会被保存，或者如果模板包含%n，则使用不同的新生成的文件名保存。
%[#][0X]n 一个序列号，用零填充到长度X（默认值：04）。例如。传递格式%04n将在第12个屏幕截图中产生0012。 每次截取屏幕截图或文件已存在时，该数字都会增加。长度X必须在0-9范围内。使用可选的#符号，mpv将使用最低的可用编号。 例如，如果您截取三张截图——0001、0002、0003——并删除前两张，那么接下来的两张截图将不再是0004和0005，而是再次成为0001和0002。
%f 当前播放视频的文件名。
%F 与 %f 相同，但去掉文件扩展名，包括点。
%x 当前播放视频的目录路径。如果视频不在文件系统上（但例如 http://），则扩展为空字符串。
%X{fallback} 与 %x 相同，但如果视频文件不在文件系统上，则返回 {&hellip;} 内的后备字符串。
%p 当前播放时间，与 OSD 中使用的格式相同。结果是“HH:MM:SS”形式的字符串。例如，如果视频的时间位置为 5 分 34 秒，则 %p 将替换为“00:05:34”。
%P 与 %p 类似，但以毫秒为单位延长播放时间。它的格式为“HH:MM:SS.mmm”，其中“mmm”是播放时间的毫秒部分。
%wX 使用格式字符串 X 指定当前播放时间。%p 类似于 %wH:%wM:%wS，%P 类似于 %wH:%wM:%wS.%wT。
有效的格式说明符:
%wH 小时（用 0 填充到两位数） %wh 小时（无填充） %wM 分钟 (00-59) %wm 总分钟数（包括小时数，与 %wM 不同） %wS 秒 (00-59) %ws 总秒数（包括小时和分钟） %wf 像 %ws，但返回的是浮点数 %wT 毫秒 (000-999) %tX 使用格式X指定当前本地日期/时间。此格式说明符在内部使用 UNIX strftime() 函数，并将传递“%X”的结果插入 strftime。 例如，%tm 将插入当前月份的数字作为数字。您必须使用多个 %tX 说明符来构建完整的日期/时间字符串。
%{prop[:fallback text]} 插入输入属性“prop”的值。例如。 %{filename} 与 %f 相同。如果该属性不存在或不可用，则插入错误文本，除非指定了回退。
%% 替换为 % 字符本身。
screenshot-directory 将屏幕截图存储在此目录中。此路径与&ndash;screenshot-template生成的文件名相连。如果模板文件名已经是绝对的，则忽略该目录。
如果该目录不存在，则在第一个屏幕截图中创建该目录。如果不是目录，尝试写截图时会报错。
默认情况下未设置此选项，因此会将屏幕截图写入启动 mpv 的目录。在伪 gui 模式下, 它被设置为桌面。
screenshot-png-compression=&lt;0-9&gt; 设置PNG压缩级别。更高意味着更好的压缩。这会影响截图文件大小和写截图的时间。过高的压缩可能会占用过多的CPU时间并中断播放。默认值为7。
screenshot-jpeg-quality=&lt;0-100&gt; 设置 JPEG 质量级别。更高意味着更好的质量。默认值为 90。
参考 configuration-files screenshot ]]></content></entry><entry><title>Mpv快捷键</title><url>/posts/202211/mpv-keyboard/</url><categories><category>blog</category></categories><tags><tag>mpv</tag></tags><content type="html"><![CDATA[Seek backward/forward 5 seconds LEFT and RIGHT Seek backward/forward 5 seconds. Shift+arrow does a 1 second exact seek (see --hr-seek). Seek forward/backward 1 minute UP and DOWN Seek forward/backward 1 minute. Shift+arrow does a 5 second exact seek (see --hr-seek). Seek to the previous/next subtitle Ctrl+LEFT and Ctrl+RIGHT Seek to the previous/next subtitle. Subject to some restrictions and might not always work; see sub-seek command. Adjust subtitle delay Ctrl+Shift+Left and Ctrl+Shift+Right Adjust subtitle delay so that the next or previous subtitle is displayed now. This is especially useful to sync subtitles to audio. Decrease/increase speed by 10% [ and ] Decrease/increase current playback speed by 10%. Halve/double speed { and } Halve/double current playback speed. Reset speed BACKSPACE Reset playback speed to normal. Undo the last seek Shift+BACKSPACE Undo the last seek. This works only if the playlist entry was not changed. Hitting it a second time will go back to the original position. See revert-seek command for details. Mark the current position Shift+Ctrl+BACKSPACE Mark the current position. This will then be used by Shift+BACKSPACE as revert position (once you seek back, the marker will be reset). You can use this to seek around in the file and then return to the exact position where you left off. backward/forward playlist &lt; and &gt; Go backward/forward in the playlist. Go forward playlist. ENTER Go forward in the playlist. Pause p / SPACE Pause (pressing again unpauses). Step forward. . Step forward. Pressing once will pause, every consecutive press will play one frame and then go into pause mode again. Step backward , Step backward. Pressing once will pause, every consecutive press will play one frame in reverse and then go into pause mode again. quit q Stop playing and quit. Q Like q, but store the current playback position. Playing the same file later will resume at the old playback position if possible. Decrease/increase volume / and * Decrease/increase volume. 9 and 0 Decrease/increase volume. Mute m Mute sound. Cycle play _ Cycle through the available video tracks. # Cycle through the available audio tracks. fullscreen f Toggle fullscreen (see also &ndash;fs).
Exit fullscreen ESC Exit fullscreen mode. stay-on-top T Toggle stay-on-top (see also --ontop). Decrease/increase pan-and-scan w and W Decrease/increase pan-and-scan range. The e key does the same as W currently, but use is discouraged. Show progression bar o (also P) Show progression bar, elapsed time and total duration on the OSD. Toggle OSD states O Toggle OSD states between normal and playback time/duration. Toggle subtitle v Toggle subtitle visibility. Cycle through the available subtitles j and J Cycle through the available subtitles. Adjust subtitle delay z and Z Adjust subtitle delay by +/- 0.1 seconds. The x key does the same as Z currently, but use is discouraged. Set/clear loop points l Set/clear A-B loop points. See ab-loop command for details. infinite looping L Toggle infinite looping. Adjust audio delay Ctrl + and Ctrl - Adjust audio delay (A/V sync) by +/- 0.1 seconds. Adjust subtitle font size Shift+g and Shift+f Adjust subtitle font size by +/- 10%. subtitles ass overrides u Switch between applying no style overrides to SSA/ASS subtitles, and overriding them almost completely with the normal subtitle style. See --sub-ass-override for more info. subtitle VSFilter aspect compatibility mode V Toggle subtitle VSFilter aspect compatibility mode. See --sub-ass-vsfilter-aspect-compat for more info. Move subtitles up/down r and R Move subtitles up/down. The t key does the same as R currently, but use is discouraged. screenshot s Take a screenshot. S Take a screenshot, without subtitles. (Whether this works depends on VO driver support.) Ctrl s Take a screenshot, as the window shows it (with subtitles, OSD, and scaled video). Seek to the beginning of the previous/next chapter PGUP and PGDWN Seek to the beginning of the previous/next chapter. In most cases, &quot;previous&quot; will actually go to the beginning of the current chapter; see --chapter-seek-threshold. Seek backward or forward by 10 minutes Shift+PGUP and Shift+PGDWN Seek backward or forward by 10 minutes. (This used to be mapped to PGUP/PGDWN without Shift.) Activate/deactivate deinterlacer d Activate/deactivate deinterlacer. Cycle aspect ratio A Cycle aspect ratio override. hardware video decoding Ctrl h Toggle hardware video decoding on/off. Move the video rectangle Alt+LEFT, Alt+RIGHT, Alt+UP, Alt+DOWN Move the video rectangle (panning). changes video zoom Alt + and Alt - Combining Alt with the + or - keys changes video zoom. Reset pan/zoom Alt+BACKSPACE Reset the pan/zoom settings. Show the playlist F8 Show the playlist and the current position in it (useful only if a UI window is used, broken on the terminal). Show the list of audio and subtitle streams F9 Show the list of audio and subtitle streams (useful only if a UI window is used, broken on the terminal). displaying statistics i and I Show/toggle an overlay displaying statistics about the currently playing file such as codec, framerate, number of dropped frames and so on. See STATS for more information. Cycle OSC del Cycle OSC visibility between never / auto (mouse-move) / always Show console ` Show the console. (ESC closes it again. See CONSOLE.) ref mpv manual ]]></content></entry><entry><title>关于我</title><url>/about.html</url><categories/><tags/><content type="html">#TODO</content></entry><entry><title>Docker Command</title><url>/posts/202107/docker-command/</url><categories/><tags/><content type="html"><![CDATA[run v2ray under docker docker run &ndash;restart=always &ndash;network host -d &ndash;name v2ray -v ~/etc/v2ray:/etc/v2ray v2fly/v2fly-core v2ray &ndash;config=/etc/v2ray/config.json
]]></content></entry><entry><title>初始化pi4环境</title><url>/posts/202107/init-pi4-env/</url><categories/><tags/><content type="html">更新环境 sudo apt update sudo apt upgrade
安装docker Add Docker’s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg set up the stable repository echo &amp;#34;deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null Install Docker Engine sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io 配置docker权限 创建 docker 组(可选，nano中已包含docker组) 将当前用户添加到 docker 组中 激活组变化 sudo groupadd docker sudo usermod -aG docker $USER newgrp docker install frpc create frpc.ini file sudo mkdir /etc/frp cd /etc/frp sudo nano frpc.ini add under line:
[common] server_addr = xxx.xx.xx.xx server_port = 7000 [pi-CM4-IO-POE-BOX-B-test] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6981 start frpc docker run --restart=always --network host -d -v /etc/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc install golang sudo tar -C /usr/local -xzf go1.16.5.linux-arm64.tar.gz 添加下面语句到.profile中
export PATH=$PATH:/usr/local/go/bin</content></entry><entry><title>分析Ubuntu Arm64 Docker Build</title><url>/posts/202011/how-to-build-ubuntu-arm64-docker/</url><categories/><tags/><content type="html">Ubuntu的Arm64 Docker Image项目在： docker-brew-ubuntu-core 该项目需要配合 Jenkins pipe line 文件执行。
文件首先删除 docker-brew-ubuntu-core 工程的对应arm64分支dist-amd64，并重新创建该分支，在该分支各ubuntu版本下创建Dockerfile，下载构造文件并归档到git仓库。
具体参考： docker-brew-ubuntu-core 最后，docker下官方提供的arm64的资源在 arm64v8 用户下。
另一个优质的docker arm资源在 balena.io ,项目地址在 balena-io-library jetson-xavier</content></entry><entry><title>在Pi4上编译ffmpeg支持硬件编解码以及测试和使用方法</title><url>/posts/202011/build-ffmpeg-under-pi4/</url><categories/><tags/><content type="html"><![CDATA[由于某些原因，需要在raspberry pi 4上编译最新版本ffmpeg，下面是方法以及测试方案。
编译准备 sudo apt update sudo apt upgrade 安装必要的工具和库 sudo apt install build-essential yasm pkg-config libx264-dev 下载源代码并编译 # 下载并解压 wget http://ffmpeg.org/releases/ffmpeg-snapshot-git.tar.bz2 tar jxvf ffmpeg-snapshot-git.tar.bz2 cd ffmpeg # 切换到明确的tag并创建分支 git checkout tags/n4.3.1 -b b4.3.1 ./configure --enable-gpl --enable-libx264 --enable-mmal --enable-omx --enable-omx-rpi ## pi4 2G上大约需要14分钟左右，请注意cpu散热 make -j4 sudo make install 测试rtsp h.264，1080p的cpu解码，并每5s保存一张图片 ffmpeg -rtsp_transport tcp -nostdin -loglevel error -i rtsp://username:password@ip -filter:v fps=fps=1/5 test_%03d.jpg 通过 bcmstat 软件观察，cpu消耗每路17%,内存消耗较少，约60MB。
测试rtsp h.264，1080p硬解，并每5s保存一张图片 首先需要配置GPU内存到300MB左右，默认76MB，配置路径为：Start-&gt;Preferences-&gt;Raspberry Pi Configuration-&gt;Performance-&gt;GPU Memory
ffmpeg -c:v h264_mmal -rtsp_transport tcp -nostdin -loglevel error -i rtsp://username:password@ip -filter:v fps=fps=1/5 test_%03d.jpg 通过 bcmstat 软件观察，cpu消耗一路9%左右，内存消耗也需要60MB，另外需要GPU mem约94MB。
注:使用GPU硬解码两路时，cpu上升到28%左右，内存和gpu内存也等比上升。
结论 使用pi的h264硬件解码时，除GPU额外内存消耗较大外，节省的cpu使用率也很少。当然，目前仅进行了ffmpeg的测试，并未通过其他软件来证实是芯片自生问题还是ffmpeg硬件解码算法问题。建议大家使用ffmpeg解码时，仅进行一路硬解。
参考 Compile FFmpeg for Ubuntu, Debian, or Mint Hardware Encoding with the Raspberry Pi ]]></content></entry><entry><title>Raspberry PI4环境初始化</title><url>/posts/202011/init-pi4/</url><categories/><tags/><content type="html"><![CDATA[pi 4准备 安装最新的pi镜像: 2020-08-20-raspios-buster-armhf 配置apt代理 sudo nano /etc/apt/apt.conf 添加下面语句到文件中：其中如果代理不需要登陆。username:password@可省略；ip和port请按照实际情况填写。
Acquire::http::Proxy &#34;http://username:password@ip:port&#34;; 更新操作系统到最新 sudo apt update sudo apt upgrade 安装bcmstat bcmstat 可以检测到如下指标：
CPU fequencies (ARM, Core, H264, V3D, ISP) Temperature (current and peak) for Core and/or PMIC IRQ/s Network Rx/Tx System utilisation (percentage user, nice, idle etc.) CPU load (including individual cores when available) GPU mem usage RAM usage (with/without swap) Memory leak detection (D/A options - instantaneous and accumulated memory deltas) Undervoltage, ARM frequency cap and temperature throttle event monitoring Customisable columns
安装方式：
curl -Ls https://raw.githubusercontent.com/MilhouseVH/bcmstat/master/bcmstat.sh -o ~/bin/bcmstat.sh chmod +x ~/bin/bcmstat.sh 添加环境变量到.profile，logout再login
export PATH=$PATH:~/bin 添加一个默认配置文件
echo &#34;xgd10&#34; &gt;&gt; ~/.bcmstat.conf 安装golang 下载 go1.15.5.linux-armv6l 执行下面命令：
sudo tar -C /usr/local -xzf go1.15.5.linux-armv6l.tar.gz 添加下面语句到.profile中
export PATH=$PATH:/usr/local/go/bin ]]></content></entry><entry><title>列举pip可安装组件的版本信息</title><url>/posts/202011/pip-list-all-versions-of-package/</url><categories/><tags/><content type="html">方法1 在需要安装组件名称后添加==符号，pip会自动列举可安装版本信息。
输入：
pip3 install pyqt5== 得到：
Could not find a version that satisfies the requirement pyqt5== (from versions: 5.14.0, 5.14.1, 5.14.2, 5.15.0, 5.15.1) 其他方法参考 Python and pip, list all versions of a package that&amp;rsquo;s available</content></entry><entry><title>使用CrowdHuman训练Yolov4</title><url>/posts/202011/use-crowd-human-trainning-yolov4/</url><categories/><tags/><content type="html">本文介绍在agx上使用旷视CrowdHuman库训练yoloV4模型。
数据准备 git clone https://github.com/jkjung-avt/yolov4_crowdhuman cd yolov4_crowdhuman/data ./prepare_data.sh 960x960 在agx上训练 git clone https://github.com/AlexeyAB/darknet.git</content></entry><entry><title>AI库</title><url>/posts/202011/ai-datasets/</url><categories/><tags/><content type="html">旷视人脸，人头,人脸，身体库 CrowdHuman is a benchmark dataset to better evaluate detectors in crowd scenarios. The CrowdHuman dataset is large, rich-annotated and contains high diversity. CrowdHuman contains 15000, 4370 and 5000 images for training, validation, and testing, respectively. There are a total of 470K human instances from train and validation subsets and 23 persons per image, with various kinds of occlusions in the dataset. Each human instance is annotated with a head bounding-box, human visible-region bounding-box and human full-body bounding-box. We hope our dataset will serve as a solid baseline and help promote future research in human detection tasks.
WIDER FACE人脸数据库 WIDER FACE dataset is a face detection benchmark dataset, of which images are selected from the publicly available WIDER dataset. We choose 32,203 images and label 393,703 faces with a high degree of variability in scale, pose and occlusion as depicted in the sample images. WIDER FACE dataset is organized based on 61 event classes. For each event class, we randomly select 40%/10%/50% data as training, validation and testing sets. We adopt the same evaluation metric employed in the PASCAL VOC dataset. Similar to MALF and Caltech datasets, we do not release bounding box ground truth for the test images. Users are required to submit final prediction files, which we shall proceed to evaluate.
kitti KITTI Vision Benchmark Suite .We take advantage of our autonomous driving platform Annieway to develop novel challenging real-world computer vision benchmarks. Our tasks of interest are: stereo, optical flow, visual odometry, 3D object detection and 3D tracking. For this purpose, we equipped a standard station wagon with two high-resolution color and grayscale video cameras. Accurate ground truth is provided by a Velodyne laser scanner and a GPS localization system. Our datsets are captured by driving around the mid-size city of Karlsruhe, in rural areas and on highways. Up to 15 cars and 30 pedestrians are visible per image. Besides providing all data in raw format, we extract benchmarks for each task. For each of our benchmarks, we also provide an evaluation metric and this evaluation website. Preliminary experiments show that methods ranking high on established benchmarks such as Middlebury perform below average when being moved outside the laboratory to the real world. Our goal is to reduce this bias and complement existing benchmarks by providing real-world benchmarks with novel difficulties to the community.
pascal VOC pascal VOC VOC2012: 20 classes. The train/val data has 11,530 images containing 27,450 ROI annotated objects and 6,929 segmentations.Size of segmentation dataset substantially increased. People in action classification dataset are additionally annotated with a reference point on the body.
image-net image-net academictorrents academictorrents 支持对现有开放ai资源库的搜索和基于BitTorrents协议的下载服务的网站。</content></entry><entry><title>人体姿势识别</title><url>/posts/202011/pose-of-person/</url><categories/><tags/><content type="html">本文尝试运行trt_pose项目。
安装依赖 安装PyTorch和Torchvision, 参见 安装Pytorch和Torchvision 安装 torch2trt git clone https://github.com/NVIDIA-AI-IOT/torch2trt cd torch2trt sudo python3 setup.py install --plugins 安装其它依赖 sudo pip3 install tqdm cython pycocotools sudo apt-get install python3-matplotlib 安装trt_pose git clone https://github.com/NVIDIA-AI-IOT/trt_pose cd trt_pose sudo python3 setup.py install 安装jetcam jetcam是一个jetson下操作usb和csi摄像头的库。
jetcam运行依赖模块traitlets，需先安装traitlets。
sudo pip3 install traitlets 然后安装jetcam
git clone https://github.com/NVIDIA-AI-IOT/jetcam cd jetcam sudo python3 setup.py install 运行示例 1import time 2 3t0 = time.time() 4torch.cuda.current_stream().synchronize() 5for i in range(50): 6 y = model_trt(data) 7 8torch.cuda.current_stream().synchronize() 9t1 = time.time() 10 11print(50.0 / (t1 - t0)) 参考 trt_pose</content></entry><entry><title>Hello Jetson Inference</title><url>/posts/202011/hello-jetson-inference/</url><categories/><tags/><content type="html">本文尝试运行Hello AI World,Hello AI World 主要包括：图像分类、物体识别、图像分割。
Jetson nano安装JetPack 略，参见 Jetson Nano环境初始化 编译项目 更新系统，并安装必要的工具
sudo apt update sudo apt upgrade sudo apt install git cmake libpython3-dev python3-numpy clone项目并进行编译，中间会提示下载模型，可以直接点击ok，下载默认的几个模型
git clone --recursive https://github.com/dusty-nv/jetson-inference cd jetson-inference mkdir build cd build cmake ../ make -j$(nproc) sudo make install sudo ldconfig pytorch的安装，参见 安装Pytorch和Torchvision 验证 切换到jetson-inference工程编译目录的bin目录下：
cd jetson-inference/build/aarch64/bin 图像分类 首次运行命令，TensorRT会花费较长时间进行网络优化，优化后的网络文件会缓存在磁盘上，下次运行直接加载优化后的模型。
# C++ ./imagenet images/orange_0.jpg images/test/output_0.jpg # Python ./imagenet.py images/orange_0.jpg images/test/output_0.jpg # C++ ./imagenet images/strawberry_0.jpg images/test/output_1.jpg # Python ./imagenet.py images/strawberry_0.jpg images/test/output_1.jpg 可以使用--network关键字指定使用什么网络，默认未指定系统默认使用googlenet：
# C++ ./imagenet --network=resnet-18 images/jellyfish.jpg images/test/output_jellyfish.jpg # Python ./imagenet.py --network=resnet-18 images/jellyfish.jpg images/test/output_jellyfish.jpg # C++ ./imagenet --network=resnet-18 images/stingray.jpg images/test/output_stingray.jpg # Python ./imagenet.py --network=resnet-18 images/stingray.jpg images/test/output_stingray.jpg 项目支持的完整的模型列表参见： Classifying Images with ImageNet 检测rtsp流:(这里的admin:123456为摄像头的用户名和密码，请根据实际情况填写用户名、密码和IP地址)
./imagenet rtsp://admin:123456@192.168.1.26 物体识别 首次运行命令，TensorRT会花费较长时间进行网络优化，优化后的网络文件会缓存在磁盘上，下次运行直接加载优化后的模型。
# C++ ./detectnet --network=ssd-mobilenet-v2 images/peds_0.jpg images/test/output_peds_0.jpg # Python ./detectnet.py --network=ssd-mobilenet-v2 images/peds_0.jpg images/test/output_peds_0.jpg # C++ ./detectnet images/peds_1.jpg images/test/output_peds_1.jpg # Python ./detectnet.py images/peds_1.jpg images/test/output_peds_1.jpg 项目支持的完整的模型列表参见： Locating Objects with DetectNet 检测rtsp流:(这里的admin:123456为摄像头的用户名和密码，请根据实际情况填写用户名、密码和IP地址)
./detectnet rtsp://admin:123456@192.168.1.26 图像分割 # C++ ./segnet --network=fcn-resnet18-cityscapes images/city_0.jpg images/test/output_city_0.jpg # Python ./segnet.py --network=fcn-resnet18-cityscapes images/city_0.jpg images/test/output_city_0.jpg # C++ ./segnet --network=fcn-resnet18-deepscene images/trail_0.jpg images/test/output_trail_0.jpg # C++ ./segnet --network=fcn-resnet18-deepscene --visualize=mask images/trail_0.jpg images/test/output_mask_trail_0.jpg # C++ ./segnet --network=fcn-resnet18-mhp images/humans_0.jpg images/test/output_humans_0.jpg # Python ./segnet.py --network=fcn-resnet18-mhp images/humans_0.jpg images/test/output_humans_0.jpg 项目支持的完整的模型列表参见： Semantic Segmentation with SegNet 检测rtsp流:(这里的admin:123456为摄像头的用户名和密码，请根据实际情况填写用户名、密码和IP地址)
./segnet --network=fcn-resnet18-deepscene rtsp://admin:Zyx123456@192.168.1.26 参见 Hello AI World Building the Project from Source Classifying Images with ImageNet Locating Objects with DetectNet Semantic Segmentation with SegNet</content></entry><entry><title>安装Pytorch和Torchvision</title><url>/posts/202011/install-pytorch-torchvision/</url><categories/><tags/><content type="html"><![CDATA[本文简单描述在jetson nano上安装最新的pytorch 1.7.0和torchvision 0.8.1的步骤。
安装 安装前准备 sudo apt update sudo apt upgrade 安装pytorch 首先下载最新的pytorch版本 PyTorch v1.7.0 ，下载后得到文件torch-1.7.0-cp36-cp36m-linux_aarch64.whl.
sudo sudo apt-get install python3-pip libopenblas-base libopenmpi-dev pip3 install Cython pip3 install numpy torch-1.7.0-cp36-cp36m-linux_aarch64.whl 安装torchvision sudo apt-get install libjpeg-dev zlib1g-dev git clone --branch v0.8.1 https://github.com/pytorch/vision torchvision cd torchvision export BUILD_VERSION=0.8.1 sudo python3 setup.py install ## 这步需要编译，时间较长 校验 运行python3
import torch print(torch.__version__) print(&#39;CUDA available: &#39; + str(torch.cuda.is_available())) print(&#39;cuDNN version: &#39; + str(torch.backends.cudnn.version())) a = torch.cuda.FloatTensor(2).zero_() print(&#39;Tensor a = &#39; + str(a)) b = torch.randn(2).cuda() print(&#39;Tensor b = &#39; + str(b)) c = a + b print(&#39;Tensor c = &#39; + str(c)) import torchvision print(torchvision.__version__) python3交互式控制台会输出类似下面的语句：
1.7.0 CUDA available: True cuDNN version: 8000 Tensor a = tensor([0., 0.], device=&#39;cuda:0&#39;) Tensor b = tensor([ 0.3777, -0.5432], device=&#39;cuda:0&#39;) Tensor c = tensor([ 0.3777, -0.5432], device=&#39;cuda:0&#39;) 0.8.0a0+45f960c 参考 pytorch for jetson ]]></content></entry><entry><title>编译最新opencv 4.4.0 with cuda</title><url>/posts/202011/build-opencv-with-cuda/</url><categories/><tags/><content type="html">本文介绍如何在nano/agx上编译opencv 4.4.0 with cuda.
步骤 该库在原有库基础上做了一些调整，原有库在nano上只能单线程运行。需要原有库的同学参见参考连接。
# clone the repository git clone https://github.com/peace0phmind/nano_build_opencv.git cd nano_build_opencv ./build_opencv.sh 参考 nano_build_opencv</content></entry><entry><title>Ubuntu使用Mac键盘</title><url>/posts/202011/ubuntu-use-mac-keyboard/</url><categories/><tags/><content type="html">介绍如何在ubuntu下使用mac键盘。
由于长期使用mac的缘故，对command按键的使用非常顺手，又由于需要使用blender软件，所以购买了Keychron K4的带数字键的机械硬盘，后来发现这个键盘虽然可以完成blender中的一些视图切换，但在截屏方面非常不方便（没有Print Screen按键）,建议有和我同样诉求的购买全尺寸键盘。
打开settings的界面，在Region &amp;amp; Language中找到Input Sources，点击下面的+号，在出现的列表中选择English(Macintosh)。
具体可以参考下面参考章节中的图片，但不要选择图片中的输入方式，图片中的输入方式会导致Shift + 3的组合键输出的是£而不是期望的#。
参考： Using a UK mac keyboard on Ubuntu</content></entry><entry><title>Blender 2.8x快捷键</title><url>/posts/202011/blender-2.8x-shortcuts/</url><categories/><tags/><content type="html">本文主要记录 Blender 2.8x的快捷方式。
注：num_做前缀的按钮表示数字键盘区的按键，num_7表示的是数字小键盘7，其他对照类比。普通的按键7会直接用7标识。lmb表示鼠标左键，rmb表示鼠标右键，mmb表示鼠标中键。
设置单位 blender 2.82默认单位为m,需要设置为mm, Unit Scale需要甚至为0.001.
通用快捷键 shift-a show add menu(添加三维物体) shift-s-1 cursor to world origin（鼠标到世界原点） shift-s-2 cursor to selected（鼠标到选择点，物体的中心点） shift-s-3 cursor to active（鼠标到活动点） shift-s-4 cursor to gride（鼠标到网格） shift-s-6 selection to grid shift-s-7 selection to cursor (keep offset) shift-s-8 selection to cursor shift-s-9 selection to active x-d remove object（删除物体等） ctrl-lmb Lasso select: drag the mouse to form a freehand selection area.(选择物体等) 视角切换 num_7 Top View ctrl-num_7 Bottom View num_1 Front View ctrl-num_1 Back View num_3 Right View ctrl-num_3 Left View num_0 Camera View num_. Put select objects to the view center.(select object, move mouse to view, press num_. button)（将选择的所有物体放在视图正中间，有别于shift-c） shift-mmb move view 对象模式（已选择物体） tab Start/stop EditMode. alt-e. Start/stop EditMode. Alternative hotkey: tab. s size(scale) mode r rotate mode a select all aa deselect all home see all object in one view shift-c CentreZero View. The 3DCursor is set to zero (0,0,0) and the view is changed so that all Objects, including the 3Dcursor, can be displayed. This is an alternative for home.（将所有物体，包括的灯光和摄像头等都放置到视图正中间，并设置3d鼠标到原点） shift-d. Add Duplicate. The selected Objects are duplicated. Grab mode starts immediately thereafter. alt-g. Clears translations, given in Grab mode. The X,Y,Z locations of selected Objects are set to zero. alt-j. Join faces, selected triangular faces are joined in pairs and transformed to quads z-4 wireframe mode（线框模式） z-6 solid mode z-8 rendered mode z-2 material preview shift-z toggles shaded mode on/off(在线框和投影模式下切换) alt-z toggles textured mode on/off（在线框和纹理模式下切换） alt-s Clears size. The X,Y,Z dimensions of selected Objects are set to 1.0. ctrl-m mirror menu. alt-o Clear Origin. The ‘Origin’ is erased for all Child Objects, which causes the Child Objects to move to the exact location of the Parent Objects. m Moves selected Object(s) to another layer, a pop-up appers. g Grab Mode. g-x g-y g-z constrains movement to X, Y or Z axis of the global reference. 编辑模式（mesh） e extrude selected e-x e-y e-z constrains extrude selected to X, Y or Z axis of the global reference. a select all a-a deselect all alt-lmb select a collection of points f Make Edge/Face. If 2 vertices are selected, an edge is created. If 3 or 4 vertices are selected, a face is created. shift-f Fill selected. All selected vertices that are bound by edges and form a closed polygon are filled with triangular faces. Holes are automatically taken into account. This operation is 2D; various layers of polygons must be filled in succession. alt-f Beauty Fill. The edges of all the selected triangular faces are switched in such a way that equally sized faces are formed. This operation is 2D; various layers of polygons must be filled in succession. The Beauty Fill can be performed immediately after a Fill. ctrl-f Flip faces, selected triangular faces are paired and common edge of each pair swapped. ctrl-r Face Loop Cut.Face loops are highlighted starting from edge under mouse pointer. alt-m select multiple points and merge them shift-c CentreZero View. The 3DCursor is set to zero (0,0,0) and the view is changed so that all Objects, including the 3Dcursor, can be displayed. This is an alternative for home. o Switch in/out of Proportional Editing. shift-g Select Similar ctrl-e edge menu.(include bridge edge loops)(对数量相等的两条边进行自动全连接) shift-n and shift-ctrl-n recalculate the normals of selected faces(重新计算法线) ctrl-b bevel tool 参考 Blender HotKeys In-depth Reference blender-2-8-where-is-the-remove-doubles blender-2-8-for-architecture</content></entry><entry><title>常用命令与工具</title><url>/posts/202010/usage-commands/</url><categories/><tags/><content type="html">类似mac airdrop的工具 这里强烈推荐一个类似mac下airdrop的网站, https://snapdrop.net 这个网站可以让使用同一局域网的所有设备（jetson agx/nano, raspberry pi, windows, linux_x86, phone etc.）相互快速共享文件或发送消息。(使用时请关闭代理，否则无法正确找到对方)
用浏览器打开即可看到自己的名字，每次刷新名字随机产生。点击对方头像可以选择文件，拖动文件到头像也可以进行文件分享。在头像上点击右键，弹出框中输入需要发送的消息。
还有个 https://www.sharedrop.io ，不过这个网站用的缓存服务器需要代理才可以访问，不是很方便。
清除DNS缓存 ubuntu操作系统使用如下命令：
sudo systemd-resolve --flush-caches 参考： How to clear DNS cache 获取不同网络环境下的ping值，DNS解析结果等 https://www.boce.com</content></entry><entry><title>调整内存使用</title><url>/posts/202010/tuning-memory-usage/</url><categories/><tags/><content type="html">nano分4G版和2G版。其SD镜像分别为： 4G版 ， 2G版 。
4G和2G内存版本的主要区别在于启动后的桌面，2G内存版考虑到内存少的情况，启用的是LXDE的桌面。（切换到level 3后, 4G版镜像比2G版镜像多0.1G，jtop观察前者0.4G,后者0.3G）
禁用桌面GUI 考虑到nano的内存紧缺，如果不是直接在nano上进行GUI开发调试，那么会考虑使用level 3的方式启动nano。禁用桌面可以节省(Unity/GNOME 大概 800MB, LXDE可以节省大概250MB）内存。
禁用桌面
sudo init 3 启用桌面
sudo init 5 如果希望修改系统默认启动行为，则输入如下命令：
默认启动到控制台界面(level 3)：
sudo systemctl set-default multi-user.target 默认启动到图形界面(level 5):
sudo systemctl set-default graphical.target 创建swap文件(可选) 2G版本nano在启动配置时可以选择添加swap，也可以使用jtop工具通过界面配置swap文件的启用和大小。
此处给出手动创建和启用swap文件的方法： 假设需要创建4GB swap文件：
sudo fallocate -l 4G /mnt/4GB.swap sudo mkswap /mnt/4GB.swap sudo swapon /mnt/4GB.swap 将下面行添加到/etc/fstab文件中
/mnt/4GB.swap none swap sw 0 0 创建swap分区(可选) 通过disks工具在磁盘上创建一个单独的分区，假设新建分区/dev/sda1
sudo mkswap /dev/sda1 # get the new partition id: xxx-xxx-xxx sudo blkid /dev/sda1 # write config to file echo &amp;#34;xxx-xxx-xxx none swap sw 0 0&amp;#34; | sudo tee -a /etc/fstab 重新启动操作系统。
参考 How to Add a Swap Partition on Jetson TX1 How do I add swap after system installation?</content></entry><entry><title>Jetson Nano环境初始化</title><url>/posts/202010/nano-env-init/</url><categories/><tags/><content type="html"><![CDATA[本文主要介绍Jetson Nano启动后环境的准备工作. TF卡flush以及系统启动初始化 下载并烧录最新的TF卡镜像 4G内存版 ; 2G内存版 。完成nvidia的一系列初始化操作（协议，时区配置，账号信息配置等）。
Ubuntu 系统的更新 sudo apt update sudo apt upgrade sudo apt dist-upgrade sudo apt autoremove 安装ohmyzsh 个人比较喜欢ohmyzsh下的一些快捷输入和操作方式。 由于墙的存在，直接安装会失败，可以手动安装
首先需要安装zsh
sudo apt install zsh -y 手动安装ohmyzsh
# Clone the repository git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh # Optionally, backup your existing ~/.zshrc file cp ~/.zshrc ~/.zshrc.orig # Create a new zsh configuration file cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc # Change your default shell chsh -s $(which zsh) 安装ohmyzsh的zsh-autosuggestions插件 zsh-autosuggestions插件支持超棒的历史命令联想功能。
# Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins) git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # Add the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc): plugins=(zsh-autosuggestions) # Start a new terminal session. 安装jdk sudo apt install openjdk-8-jdk -y 安装terminator terminator是ubuntu下比较美观，且支持分屏的工具。其可以类比为mac下的iterm2。
sudo apt install terminator -y 安装pip3 sudo apt install python3-pip -y 安装jtop jtop可以用来显示系统资源使用情况，比如：查看cpu，内存，gpu使用情况；查看安装的库的信息；控制风扇启用和转速等。
sudo -H pip3 install -U jetson-stats sudo systemctl restart jetson_stats.service 使用前还需要logout或者reboot
使用jtop启用jetson_clocks 在不启用jetson_clocks时，jetson的cpu和gpu的主频是根据需要动态变化的，且如果支持PWM的风扇默认也是不工作的（Fan转速为0，如果是普通的3pin风扇则会持续稳定运行。只有4pin的调速风扇会受到jetson_clocks的影响控制转速）。建议启用jetson_clocks，将主频固定下来。在GUI界面，未启用jetson_clocks时会有卡顿的现象。
输入jtop启动jtop，按5进入控制界面：
点击system按钮，启用Fan转速的Auto模式 点击jetson_clocks左边的s按钮，启动jetson_clocks 点击boot左边的e，设置jetson_clocks系统启动自动运行 安装golang环境 从 golang下载页面 下载最新的 go1.15.3.linux-arm64安装包 执行下面命令安装golang到/usr/local目录下:
sudo tar -C /usr/local -xzf go1.15.3.linux-arm64.tar.gz 将/usr/local/go/bin目录添加到PATH环境变量，参见
export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin 安装curl curl 支持 http, https, socks4, socks5 代理 wget 支持 http, https 代理
而socks5支持dns代理，可以解决一些dns污染的问题
sudo apt install curl -y 配置nvcc环境变量 拷贝下面代码到.bashrc或.zshrc文件(如果你安装使用了zsh)，或者.profile或.zprofile文件。 关于 .*rc和.*profile文件的使用说明参见 export PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH 配置docker权限 创建 docker 组(可选，nano中已包含docker组) 将当前用户添加到 docker 组中 激活组变化 sudo groupadd docker sudo usermod -aG docker $USER newgrp docker 当激活了组变化后，执行docker ps 可以看到docker命令正确执行。
配置docker registry mirrors 配置docker registry mirrors可以进行docker pull加速，解决docker pull缓慢的问题。
使用编辑器打开/etc/docker/daemon.json文件，按json格式添加如下内容：
&#34;registry-mirrors&#34;: [&#34;https://registry.docker-cn.com&#34;] 此处url也可使用阿里云的个人docker加速器，例如：https://xxxxx.mirror.aliyuncs.com，这里 xxxx参见 添加完后，daemon.json文件内容类似如下：
{ &#34;runtimes&#34;: { &#34;nvidia&#34;: { &#34;path&#34;: &#34;nvidia-container-runtime&#34;, &#34;runtimeArgs&#34;: [] } }, &#34;registry-mirrors&#34;: [&#34;https://7s7m9b11.mirror.aliyuncs.com&#34;] } 安装 docker-compose sudo apt install docker-compose -y 安装右键resize image工具 sudo apt install nautilus-image-converter 上面命令安装完成后，执行下面命令重启nautilus
nautilus -q ]]></content></entry><entry><title>AGX添加nvme ssd并设置从ssd启动</title><url>/posts/202010/add-nvme-ssd/</url><categories/><tags/><content type="html">AGX出厂自带32G EMMC，并自带Ubuntu 18.04 + JetPack 4.4。本文对EMMC进行了磁盘读写的测试，并且对AGX进行改装，分别测试加装了海康的1T nvme ssd硬盘和SAMSUNG 1T nvme ssd，并进行了对比测试。最后简单介绍了了如何将AGX的默认启动方式修改为从nvme的ssd启动。
磁盘读写性能测试方式 使用linux下的dd进行磁盘读写性能测试。
测试磁盘写速度 sync; dd if=/dev/zero of=tempfile bs=1M count=1024; sync 测试磁盘读速度 dd if=tempfile of=/dev/null bs=1M count=1024 清理读缓存 sudo /sbin/sysctl -w vm.drop_caches=3 emmc性能测试 emmc写盘和覆盖写 emmc写盘1.4 GB/s(实际测试结果输出后，该民令并没有立即结束，所以这里的数据并不能用于参考) emmc覆盖写的速度大概在119 MB/s emmc缓存读和直接读的速度 emmc缓存读的速度很高，在7.7GB/s左右 emmc直接读取的速度很低，在307 MB/s左右 SamSung 1T SSD性能测试 SamSung写盘和覆盖写 SamSung写盘1.3 GB/s SamSung覆盖写的速度大概在897 MB/s SamSung缓存读和直接读的速度 SamSung缓存读的速度很高，在7.1GB/s左右 SamSung直接读取的速度很低，在1.7 GB/s左右 HikVision 1T SSD性能测试 HikVision写盘和覆盖写 HikVision写盘1.3 GB/s HikVision覆盖写的速度大概在992 MB/s HikVision缓存读和直接读的速度 HikVision缓存读的速度很高，在7.9GB/s左右 1.HikVision直接读取的速度很低，在1.6 GB/s左右 对比 HikVision 1T和SamSung 1T的性能相近，价格前者8百不到，后者1200左右，相差400左右，我先买了HikVision后购买并替换为了SamSung的ssd，下面介绍下原因：
先看下两个ssd的照片对比，上面为HikVison，下面为SamSung：
正面对比，差别不大 背面对比：从背面看SamSung的背面没有元器件，Hikision的有很多细小密集的元器件。 从HikVision装配图来看,背面有元器件会导致整个ssd中间突起。 替换下来的HikVision，已经有轻微变形了。 从SamSung装配图来看,背面没有元器件会非常贴合Agx的PCI-E接口。 修改启动盘，从ssd启动 完成物理装配后开机 在Disks工具中找到1T SSD，点击小齿轮，对整个磁盘进行format创建一个大分区（有别于参考中，还要预留16G空间，此处使用完整空间）。完成format后，保持磁盘在unmount状态。 打开命令行，执行下面命令：（注： 在我的disks中，我的磁盘名称为/dev/nvme0n1，而不是参考中的/dev/nvme0n1p1，可能与我使用的jetpack 4.4.1有关，所以我修改了代码以保证程序可以运行） # clone the repository: git clone https://github.com/peace0phmind/rootOnNVMe.git # switch to that repository&amp;#39;s directory cd rootOnNVMe # copy the rootfs of the eMMC card to the SSD ./copy-rootfs-ssd.sh # Finally, we will add a service which will run a script when the system starts up. ./setup-service.sh 参考 Install NVMe SSD on NVIDIA Jetson AGX Developer Kit Jetson Xavier NX – Run from SSD</content></entry><entry><title>Agx开箱</title><url>/posts/202010/get-and-assemble-agx/</url><categories/><tags/><content type="html">经过20天漫长的等待，终于在某个星期日收到了包裹。
包裹看上去挺大的。 拆开后AGX的盒子大概这么大，图的上方是我的Mac book pro,可以对比参考下大小。 打开盒子，AGX实际只有盒子大小的1/4，就只中间一块，保护的很好。 AGX的实际大小差不多是一个PCI-E插槽的大小。 电源插头不是国标的，毕竟是海外购，能够理解，自己的家里找了个电源线插上，没有的话可以上某宝购买，几块钱还包邮。 接上显示器，键盘鼠标等设备，开机即可进入系统（中间License选择界面和初始化配置界面按提示操作）。（AGX内置了一块32G的eMMC,默认预装Ubuntu 18.04） 由于AGX接口太少(一个HDMI， 2个type-c，一个E-SATA接口，一个micro-usb)，所以测试了一下外接华为扩展坞，支持双屏显示，扩展网口等。上图我插上了USB的键盘和无线鼠标。</content></entry><entry><title>开篇</title><url>/posts/202010/my-first-post/</url><categories/><tags/><content type="html">9月份某个星期六，加班到恨晚考虑到第二天还要到公司，于是将电脑放在了窗边的工位上。第二天一场大雨把我2013年下半年购买的顶配（习惯购买默认出厂顶配，非定制机型）Mac Book Pro泡在了水里。屏幕被烧坏，但机器加电连接外接显示器依然可以正常工作，不得不佩服苹果的做工扎实。吃饭的家伙没有了，得赶紧整一个，否则耽误项目进度，于是有了下面的折腾之旅。
按理说我是标准的“Apple Fans”，电脑坏了会第一时间考虑购买苹果的最新款顶配Mac Book Pro，那我为啥还要折腾呢？
我的Mac Book Pro是最后一代采用nvidia显卡的苹果笔记本，可以说是绝版nvidia+apple的配置，后面的mac book电脑都无法跑cuda，当年在自己的笔记本上给小伙伴演示使用cuda加速tf，而其他人都只能跑在linux系统上，这种独特的感觉在在现在的苹果电脑上找不到了。 作为一个优秀的打字员，学会的第一个技能就是盲打（不看键盘打字），紧接着的第二个技能就是熟记大部分常用软件的快捷键，第三个技能就是手速快，配合上快捷键，那屏幕上翻飞的窗口，别人看了就是一种艺术的享受。自从mac有了bar&amp;hellip;，关键bar还替换了常用的一些F1-12，切换不同窗口上下文得看到bar变化后再去点击&amp;hellip;。可以说bar就不是为我等优秀打字员设计的。对于熟记快捷键的我来说，bar就是一个摆设，为没用的东西花上3000快，不值！！！ 苹果我只崇拜2个人，Jobs于2011年10月去世了；苹果首席设计师乔纳森·艾维（Jony Ive）从Jobs去世的那年开始就风闻计划离开苹果，终于在去年某天离开了苹果。从2012年到现在，苹果除了换换配置，更新更新周边，系统升级下皮肤，几乎就没有以前那种令人惊艳的创新的产品面试（那个bar真不算，那个是设计上的倒退，对于我来说；也有人说窄边框，但窄边框真不是苹果首先搞出来的）。缺少了这两位的苹果，已经从一个伟大的公司变成了一个只考虑如何赚钱的，搞办公室文化的体量很大的公司。可以说，2013年前，还有很多技术是苹果首次采用和创新的，之后就真的没有什么能够吸引我注意的产品了。 随着虚拟化，k8s等技术得到极大的运用，作为优秀打字员的我也希望在本地好好玩玩这些技术，所以我需要一个32-64G内存，1T硬盘的笔记本，可惜我苹果顶配只有16G内存。7年了，16G内存还是16G内存，没有发生过变化。有人有不同观点，说32G内存普通人用不上；其实我想说，最用不上的更新是CPU，我就打打字，你说CPU能有多少占用？还每年百分之多少提升，给我打字员用就是浪费。如今的Raspberry Pi 3B都够用（当然排除喝咖啡时间，当然现在技术都先进了，都在云端和咖啡了，及其CPU也就本地喝咖啡用用，没啥强烈诉求了）。按照摩尔定律6年了，内存少说应该上到64G而且价格不变，考虑到用户用不上这么多内存，配置32G内存的电脑价格应该还要有下降。看看苹果定制机型，32G版本的配置足够我买其它品牌相同配置的2个。 介于苹果已经走下神坛；介于库克把我崇拜的Ive排挤出了公司；介于苹果没有创新的点吸引到我花多一倍的钱购买，苹果的选项被我划掉了。
市面上标配32G内存的电脑真的太少，太贵了。出厂默认32G内存的笔记本电脑型号很少，且其16G机型和32G机型相差很多，有些小伙伴都是买16G机型自己回来自己加上一个16G的。这个选项我也考虑过，但是没有选到好看的机器（可以自己加内存的笔记本，都比较厚重&amp;hellip;），所以这个只是待选项，继续寻找中。
在上Nvidia网站找东西的时候，无意间发现我关注的Jetson AGX出32G版本的了(记得刚出来的时候是16G的把，当时Mac正常工作，没有考虑过，所以可能记错了)，一个想法跃然脑中，使用AGX作开发电脑！！！
在对比了某宝价格和amazon海外购，决定在amazon上进行海外购，给国家多贡献点自己的力量。
于是果断出手购买了一个Huawei 16G的最新笔记本先用着。才4K多的价格，相对于类似配置的苹果来说，那真的是白菜价了。
下面，即将开启AGX折腾之旅。</content></entry></search>